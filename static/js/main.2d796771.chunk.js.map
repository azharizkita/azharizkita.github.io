{"version":3,"sources":["Application/Projects/index.js","Application/Welcome/index.js","Application/index.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","margin","spacing","Projects","classes","React","useState","githubData","setGithubData","useEffect","fetch","then","response","json","result","console","log","processed","forEach","value","Date","updated_at","sorted","Object","keys","sort","a","b","push","error","Grid","item","xs","md","style","padding","Typography","variant","align","Divider","length","map","i","key","lg","Card","CardContent","minHeight","color","name","paddingBottom","container","className","width","Tooltip","title","Chip","icon","Update","label","toLocaleDateString","toLocaleTimeString","Copyright","license","description","CardActions","Button","onClick","window","open","html_url","fullWidth","Skeleton","height","large","centers","Welcome","props","setTitle","bio","setBio","component","Avatar","alt","src","avatar_url","maxWidth","minWidth","GitHub","MailOutline","flexGrow","menuButton","marginRight","App","openDrawer","setOpenDrawer","matchMedia","matches","isDark","setIsDark","addEventListener","event","createMuiTheme","palette","primary","main","secondary","type","ThemeProvider","CssBaseline","Drawer","anchor","onClose","role","List","ListItem","button","selected","ListItemIcon","AccountCircle","ListItemText","Assessment","AppBar","position","Toolbar","IconButton","edge","aria-label","Menu","Brightness4","Brightness7","paddingLeft","paddingRight","state","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2d796771.chunk.js","sourcesContent":["import { Card, CardContent, Chip, Divider, Grid, Typography, makeStyles, Tooltip, Button, CardActions } from '@material-ui/core';\nimport { Update, Copyright } from '@material-ui/icons';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport React from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n        '& > *': {\n            margin: theme.spacing(0.5),\n        },\n    },\n}));\n\nconst Projects = () => {\n    const classes = useStyles()\n    const [githubData, setGithubData] = React.useState([])\n    React.useEffect(() => {\n        try {\n            fetch('https://api.github.com/users/azharizkita/repos').then((response) =>\n                response.json()\n            ).then((result) => {\n                console.log(result)\n                var processed = {}\n                result.forEach((value) => {\n                    processed[+new Date(value.updated_at)] = value\n                    // console.log(+new Date(value.updated_at))\n                })\n                var sorted = []\n                Object.keys(processed).sort((a, b) => b - a).forEach((value) => sorted.push(processed[value]))\n                setGithubData(sorted)\n            })\n        } catch (error) {\n            console.error(error)\n        }\n    }, [])\n    console.log(githubData)\n    return (\n        <>\n            <Grid item xs={12} md={12} style={{ padding: 20 }}>\n                <Typography variant={'h5'} align={'center'}>Project Gallery</Typography>\n                <div style={{ padding: 10 }} />\n                <Divider />\n            </Grid>\n            {githubData.length !== 0 ? (\n                <>\n                    {githubData.map((value, i) => (\n                        <Grid key={i} item xs={12} md={4} lg={4}>\n                            <Card variant={'outlined'}>\n                                <CardContent style={{ minHeight: 220 }}>\n                                    <Typography variant={'h6'} align={'center'} color={'textPrimary'}>\n                                        {value.name}\n                                    </Typography>\n                                    <div style={{ paddingBottom: 10 }} />\n                                    <Divider />\n                                    <div style={{ paddingBottom: 10 }} />\n                                    <Grid\n                                        container\n                                        className={classes.root}\n                                        style={{ width: '100%' }}\n                                    >\n                                        <Grid item>\n                                            <Tooltip title={'Last update'}>\n                                                <Chip\n                                                    icon={<Update />}\n                                                    label={new Date(value.updated_at).toLocaleDateString() + ', ' + new Date(value.updated_at).toLocaleTimeString()}\n                                                    variant={'outlined'}\n                                                />\n                                            </Tooltip>\n                                        </Grid>\n                                        <Grid item>\n                                            <Tooltip title={'License'}>\n                                                <Chip\n                                                    icon={<Copyright />}\n                                                    label={value.license ? value.license.name : 'No License'}\n                                                    variant={'outlined'}\n                                                />\n                                            </Tooltip>\n                                        </Grid>\n                                    </Grid>\n                                    <div style={{ paddingBottom: 10 }} />\n                                    <Divider />\n                                    <div style={{ paddingBottom: 10 }} />\n                                    <Typography align={'center'}>\n                                        {value.description ? value.description : 'No desription.'}\n                                    </Typography>\n                                </CardContent>\n                                <CardActions>\n                                    <Button color={'primary'} variant={'contained'} onClick={() => window.open(value.html_url, '_blank')} fullWidth>Open Repository</Button>\n                                </CardActions>\n                            </Card>\n                        </Grid>\n                    ))}\n                </>\n            ) : (\n                    <>\n                        <Grid item xs={12} md={4} lg={4}>\n                            <Skeleton width={'auto'} height={400} />\n                        </Grid>\n                        <Grid item xs={12} md={4} lg={4}>\n                            <Skeleton width={'auto'} height={400} />\n                        </Grid>\n                        <Grid item xs={12} md={4} lg={4}>\n                            <Skeleton width={'auto'} height={400} />\n                        </Grid>\n                    </>\n                )\n            }\n        </>\n    )\n}\n\nexport default Projects;\n","import { Avatar, Grid, Typography, makeStyles, Divider, Chip } from '@material-ui/core'\nimport { GitHub, MailOutline } from '@material-ui/icons/';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport React from 'react'\n\nconst useStyles = makeStyles((theme) => ({\n    large: {\n        width: theme.spacing(20),\n        height: theme.spacing(20),\n    },\n    centers: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n        '& > *': {\n            margin: theme.spacing(0.5),\n        },\n    },\n}));\n\nconst Welcome = (props) => {\n    const setTitle = props.setTitle\n    const classes = useStyles()\n    const [bio, setBio] = React.useState({})\n    React.useEffect(() => {\n        try {\n            fetch('https://api.github.com/users/azharizkita').then((response) =>\n                response.json()\n            ).then((value) => {\n                setBio(value)\n            });\n        } catch (error) {\n            console.error(error)\n        }\n    }, [])\n    return (\n        <>\n            <Grid item xs={12} md={12} style={{ padding: 20 }}>\n                {bio.name ? (\n                    <>\n                        <Typography variant={'h5'} align={'center'}>Greetings!</Typography>\n                        <Typography variant={'h5'} align={'center'} component={'div'}>My name is {bio.name}.</Typography>\n                    </>\n                ) : (\n                        <>\n                            <Typography variant={'h5'} align={'center'}>Greetings!</Typography>\n                            <div className={classes.centers}>\n                                <Skeleton width={250} height={24} />\n                            </div>\n                        </>\n                    )\n                }\n            </Grid>\n            <Grid item xs={12} md={12}>\n                <div className={classes.centers}>\n                    <Avatar alt=\"Remy Sharp\" src={bio.avatar_url} className={classes.large} />\n                </div>\n            </Grid>\n            <div style={{ paddingBottom: 5 }} />\n            <Grid item xs={12} md={12}>\n                <div className={classes.centers}>\n                    <Divider style={{ maxWidth: 550, width: '100%', minWidth: 100 }} />\n                </div>\n            </Grid>\n            <Grid item xs={12} md={12}>\n                {bio.name ? (\n                    <>\n                        <Typography variant={'body1'} align={'center'}>Short summary about my activity? {bio.bio}.</Typography>\n                    </>\n                ) : (\n                        <>\n                            <div className={classes.centers}>\n                                <Skeleton width={500} variant={'text'} />\n                            </div>\n                        </>\n                    )\n                }\n            </Grid>\n            <Grid item xs={12} md={12}>\n                {bio.name ? (\n                    <>\n                        <Typography variant={'body1'} component={'div'} align={'center'}>You may check out my <Chip\n                            label={'projects'}\n                            onClick={() => setTitle('Projects')}\n                            variant={'outlined'}\n                        /></Typography>\n                    </>\n                ) : (\n                        <>\n                            <div className={classes.centers}>\n                                <Skeleton width={250} variant={'text'} />\n                            </div>\n                        </>\n                    )\n                }\n            </Grid>\n            <Grid item xs={12} md={12}>\n                <div className={classes.centers}>\n                    <Divider style={{ maxWidth: 550, width: '100%', minWidth: 100 }} />\n                </div>\n            </Grid>\n            <Grid item xs={12} md={12}>\n                <Typography variant={'h6'} align={'center'}>Reach me out</Typography>\n            </Grid>\n            <Grid item xs={12} md={12}>\n                <div className={classes.centers}>\n                    {bio.name ? (\n                        <>\n                            <Chip\n                                icon={<GitHub />}\n                                label={'GitHub.com/azharizkita'}\n                                onClick={() => window.open(bio.html_url, '_blank')}\n                                variant={'outlined'}\n                            />\n                            <Chip\n                                icon={<MailOutline />}\n                                label={'azharizkita@icloud.com'}\n                                onClick={() => window.open('mailto:azharizkita@icloud.com')}\n                                variant={'outlined'}\n                            />\n                        </>\n                    ) : (\n                            <>\n                                <Skeleton width={500} variant={'text'} />\n                            </>\n                        )\n                    }\n                </div>\n            </Grid>\n            <div style={{ paddingBottom: 5 }} />\n        </>\n    )\n}\n\nexport default Welcome","import { AppBar, IconButton, Toolbar, Typography, makeStyles, Grid, Drawer, List, ListItem, ListItemIcon, ListItemText, Divider, Tooltip } from '@material-ui/core';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { Menu, AccountCircle, Assessment, Brightness7, Brightness4 } from '@material-ui/icons/';\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Projects from './Projects'\nimport Welcome from './Welcome';\nimport React from 'react'\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nconst App = () => {\n    const classes = useStyles()\n    const [title, setTitle] = React.useState('Biography')\n    const [openDrawer, setOpenDrawer] = React.useState(false)\n    const [isDark, setIsDark] = React.useState(window.matchMedia('(prefers-color-scheme: dark)').matches)\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {\n        if (event.matches) {\n            setIsDark(true)\n        } else {\n            setIsDark(false)\n        }\n    })\n    const theme = createMuiTheme({\n        palette: {\n            primary: {\n                main: '#212121',\n            },\n            secondary: {\n                main: '#424242',\n            },\n            type: isDark ? 'dark' : 'light'\n        },\n    });\n    return (\n        <>\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <Drawer anchor={'left'} open={openDrawer} onClose={() => setOpenDrawer(false)}>\n                    <div style={{ width: 'auto' }} role=\"presentation\">\n                        <List style={{ width: 250 }}>\n                            <ListItem button selected={title === 'Biography'} onClick={() => {\n                                setTitle('Biography')\n                                setOpenDrawer(false)\n                            }}>\n                                <ListItemIcon>{<AccountCircle />}</ListItemIcon>\n                                <ListItemText primary={'Biography'} />\n                            </ListItem>\n                            <ListItem button selected={title === 'Projects'} onClick={() => {\n                                setTitle('Projects')\n                                setOpenDrawer(false)\n                            }}>\n                                <ListItemIcon>{<Assessment />}</ListItemIcon>\n                                <ListItemText primary={'Projects'} />\n                            </ListItem>\n                        </List>\n                    </div>\n                    <Divider />\n                </Drawer>\n                <div className={classes.root}>\n                    <AppBar position={'sticky'}>\n                        <Toolbar>\n                            <IconButton edge=\"start\" className={classes.menuButton} onClick={() => setOpenDrawer(true)} color=\"inherit\" aria-label=\"menu\">\n                                <Menu />\n                            </IconButton>\n                            <Typography variant=\"h6\" className={classes.title}>\n                                {title}\n                            </Typography>\n                            <Tooltip title={isDark ? 'Switch to light mode' : 'Switch to dark mode'}>\n                                <IconButton onClick={() => setIsDark(!isDark)}>\n                                    {isDark ? <Brightness4 style={{ color: 'white' }} /> : <Brightness7 style={{ color: 'white' }} />}\n                                </IconButton>\n                            </Tooltip>\n                        </Toolbar>\n                    </AppBar>\n                    <div style={{ paddingBottom: 15 }} />\n                    <Grid container spacing={2} style={{ width: '100%', paddingLeft: '5%', paddingRight: '5%' }}>\n                        {title === 'Biography' ? <Welcome setTitle={(state) => setTitle(state)} /> : (title === 'Projects' ? <Projects /> : '')}\n                    </Grid>\n                </div>\n            </ThemeProvider>\n        </>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Application';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}