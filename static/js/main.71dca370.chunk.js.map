{"version":3,"sources":["Application/Projects/index.js","Application/Welcome/index.js","Application/Blogs/BlogContainer/index.js","Application/Blogs/index.js","Application/Covid/index.js","Application/index.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","margin","spacing","Projects","props","setTitle","classes","React","useState","githubData","setGithubData","filters","setFilters","tagData","setTagData","repositories","setRepositories","useEffect","fetch","then","response","json","result","tagsData","processed","forEach","value","name","tags","undefined","description","metaDescription","split","length","map","val","trim","tag","Date","pushed_at","sorted","Object","keys","sort","a","b","push","error","console","filteredRepos","repo","isFiltered","filterName","includes","filter","className","style","padding","index","Chip","key","avatar","Avatar","label","onClick","e","variant","Grid","container","alignContent","alignItems","justify","i","item","xs","md","lg","Card","CardContent","minHeight","Typography","align","color","paddingBottom","Divider","width","Tooltip","title","icon","Update","updated_at","toLocaleDateString","toLocaleTimeString","Copyright","license","CardActions","Button","window","open","fullWidth","html_url","paddingTop","height","LinearProgress","valueBuffer","large","centers","Welcome","useTheme","isSmall","useMediaQuery","breakpoints","up","bio","setBio","component","Skeleton","alt","src","avatar_url","maxWidth","minWidth","GitHub","MailOutline","BlogContainer","state","loading","content","handleNetworkErrors","bind","this","getGist","prevProps","prevState","snapshot","gist","file","id","setState","setupCallback","script","document","createElement","url","type","onerror","head","appendChild","nextState","div","replace","doc","DOMParser","parseFromString","querySelectorAll","el","remove","finalHTML","body","outerHTML","dangerouslySetInnerHTML","__html","Component","Blogs","setPageDescription","setPageTitle","uniqueId","openId","setRefresher","blogs","setBlogs","blogId","setBlogId","openBlog","setOpenBlog","ButtonLink","to","now","useMemo","forwardRef","itemProps","ref","blog","metadata","created_at","resorted","sortedBlog","Dialog","fullScreen","onClose","DialogTitle","DialogContent","DialogActions","values","Schedule","Covid","down","isLandscape","setIsLandscape","openError","setOpenError","originalResult","setOriginalResult","isOverall","setIsOverall","sortedResult","setSortedResult","lastUpdate","setLastUpdate","countriesName","setCountriesName","chartData","setChartData","global","setGlobal","openInfo","setOpenInfo","openCountryInfo","setOpenCountryInfo","parsedCountryInfo","setParsedCountryInfo","selectedTier","setSelectedTier","isDark","accentColor","setAccentColor","fontColor","setFontColor","defaults","defaultFontColor","isPotrait","matchMedia","matches","addEventListener","orientation","Countries","Message","toLocaleString","Global","catch","reason","countryNames","newSorted","TotalConfirmed","NewConfirmed","country","CountryCode","Country","Math","ceil","finalSorted","confirmed","recovered","deaths","TotalRecovered","TotalDeaths","NewRecovered","NewDeaths","data","backgroundColor","textAlign","datasets","labels","options","maintainAspectRatio","responsive","tooltips","callbacks","tooltipItem","legend","position","TableContainer","Table","aria-label","TableHead","TableRow","TableCell","TableBody","tier","rank","toFixed","RotateRight","fontSize","FormControl","RadioGroup","onChange","event","parseInt","FormControlLabel","control","Radio","Select","target","JSON","parse","native","disabled","stringify","Hidden","mdDown","ListItem","ListItemAvatar","Error","ErrorOutline","ListItemText","primary","secondary","Favorite","FavoriteBorder","RemoveCircle","RemoveCircleOutline","direction","IconButton","HelpOutline","scales","xAxes","gridLines","zeroLineColor","yAxes","text","yLabel","Pagination","page","count","flexGrow","menuButton","marginRight","App","URLSearchParams","location","search","urlParameters","setParameters","section","get","pageTitle","pageDescription","openDrawer","setOpenDrawer","setIsDark","ListItemLink","selected","button","ListItemIcon","createMuiTheme","palette","main","blogMeta","blogTitle","blogDescription","toUpperCase","slice","Helmet","ThemeProvider","CssBaseline","SwipeableDrawer","anchor","onOpen","role","Grain","AccountCircle","Assessment","Book","getFullYear","AppBar","Toolbar","edge","Menu","Brightness4","Brightness7","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wgBAIMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,QAAS,OACTC,eAAgB,SAChBC,SAAU,OACV,QAAS,CACLC,OAAQL,EAAMM,QAAQ,UA8LnBC,EAzLE,SAACC,GACd,IAAMC,EAAWD,EAAMC,SACjBC,EAAUZ,IAFQ,EAGYa,IAAMC,SAAS,IAH3B,mBAGjBC,EAHiB,KAGLC,EAHK,OAIMH,IAAMC,SAAS,IAJrB,mBAIjBG,EAJiB,KAIRC,EAJQ,OAKML,IAAMC,SAAS,IALrB,mBAKjBK,EALiB,KAKRC,EALQ,OAMgBP,IAAMC,SAAS,IAN/B,mBAMjBO,EANiB,KAMHC,EANG,KAoExB,OA7DAT,IAAMU,WAAU,WACZZ,EAAS,YACT,IACIa,MAAM,kDAAkDC,MAAK,SAACC,GAAD,OACzDA,EAASC,UACXF,MAAK,SAACG,GACJ,IAAIC,EAAW,GACXC,EAAY,GAChBF,EAAOG,SAAQ,SAACC,GACZ,GAAmB,0BAAfA,EAAMC,KAAkC,CACxC,IAAIC,OAAOC,EACX,GAAIH,EAAMI,YAAa,CACnB,IAAIC,EAAkBL,EAAMI,YAAYE,MAAM,KAC9CN,EAAK,YAAkBK,EAAgB,IACvCH,EAAOG,EAAgB,GAAGC,MAAM,MACvBC,OAAS,IACdP,EAAK,KAAWE,EAAK,GAAGI,MAAM,KAAKE,KAAI,SAACC,GAAD,OAASA,EAAIC,UACpDV,EAAK,KAASD,SAAQ,SAACY,GACU,qBAAlBd,EAASc,GAChBd,EAASc,IAAQ,EAEjBd,EAASc,GAAO,MAKhCb,GAAW,IAAIc,KAAKZ,EAAMa,YAAcb,MAGhD,IAAIc,EAAS,GACbC,OAAOC,KAAKlB,GAAWmB,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAID,KAAGnB,SAAQ,SAACC,GAAD,OAAWc,EAAOM,KAAKtB,EAAUE,OACtFhB,EAAc8B,GACd1B,EAAWS,MAEjB,MAAOwB,GACLC,QAAQD,MAAMA,MAGnB,IACHxC,IAAMU,WAAU,WACZ,GAAIR,EAAY,CACZ,IAAMwC,EAAgBxC,EAAWyB,KAAI,SAACgB,GAClC,IAAIC,GAAa,EAUjB,OATAxC,EAAQc,SAAQ,SAAC2B,GACTF,EAAKtB,MACAsB,EAAKtB,KAAKyB,SAASD,KAIxBD,GAAa,MAGjBA,EACOD,EAEA,QAEZI,QAAO,SAACnB,GAAD,OAAiB,OAARA,KACnBnB,EAAgBiC,MAErB,CAACtC,EAASF,IAET,oCAC2B,IAAtBA,EAAWwB,OACR,oCACI,yBAAKsB,UAAWjD,EAAQT,KAAM2D,MAAO,CAAEC,QAAS,KAC3C5C,EACG4B,OAAOC,KAAK7B,GAASqB,KAAI,SAACG,EAAKqB,GAAN,OACrB,kBAACC,EAAA,EAAD,CACIC,IAAKF,EACLG,OAAQ,kBAACC,EAAA,EAAD,KAASjD,EAAQwB,IACzB0B,MAAO1B,EACP2B,QAAS,WACDrD,EAAQ0C,SAAShB,GACjBzB,EAAWD,EAAQ2C,QAAO,SAAAW,GAAC,OAAIA,IAAM5B,MAErCzB,EAAW,GAAD,mBAAKD,GAAL,CAAc0B,MAGhC6B,QAASvD,EAAQ0C,SAAShB,GAAO,UAAY,gBAGrD,IAER,kBAAC8B,EAAA,EAAD,CACIC,WAAS,EACTC,aAAc,SACdC,WAAY,SACZC,QAAS,UAEgB,IAAxBxD,EAAakB,OAAelB,EAAamB,KAAI,SAACR,EAAO8C,GAAR,OAC1C,kBAACL,EAAA,EAAD,CAAMP,IAAKY,EAAGC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGpB,MAAO,CAAEC,QAAS,KACvD,kBAACoB,EAAA,EAAD,CAAMX,QAAS,YACX,kBAACY,EAAA,EAAD,CAAatB,MAAO,CAAEuB,UAAW,MAC7B,kBAACC,EAAA,EAAD,CAAYd,QAAS,KAAMe,MAAO,SAAUC,MAAO,eAC9CxD,EAAMC,MAEX,yBAAK6B,MAAO,CAAE2B,cAAe,MAC7B,kBAACC,EAAA,EAAD,MACA,yBAAK5B,MAAO,CAAE2B,cAAe,MAC7B,kBAAChB,EAAA,EAAD,CACIC,WAAS,EACTb,UAAWjD,EAAQT,KACnB2D,MAAO,CAAE6B,MAAO,SAEhB,kBAAClB,EAAA,EAAD,CAAMM,MAAI,GACN,kBAACa,EAAA,EAAD,CAASC,MAAO,eACZ,kBAAC5B,EAAA,EAAD,CACI6B,KAAM,kBAACC,EAAA,EAAD,MACN1B,MAAO,IAAIzB,KAAKZ,EAAMgE,YAAYC,qBAAuB,KAAO,IAAIrD,KAAKZ,EAAMgE,YAAYE,qBAC3F1B,QAAS,eAIrB,kBAACC,EAAA,EAAD,CAAMM,MAAI,GACN,kBAACa,EAAA,EAAD,CAASC,MAAO,WACZ,kBAAC5B,EAAA,EAAD,CACI6B,KAAM,kBAACK,EAAA,EAAD,MACN9B,MAAOrC,EAAMoE,QAAUpE,EAAMoE,QAAQnE,KAAO,aAC5CuC,QAAS,gBAKzB,yBAAKV,MAAO,CAAE2B,cAAe,MAC7B,kBAACC,EAAA,EAAD,MACA,yBAAK5B,MAAO,CAAE2B,cAAe,MAC7B,kBAAChB,EAAA,EAAD,CACIC,WAAS,EACTb,UAAWjD,EAAQT,KACnB2D,MAAO,CAAE6B,MAAO,SAEf3D,EAAME,KAAOF,EAAME,KAAKM,KAAI,SAACG,EAAKqB,GAAN,OACzB,kBAACC,EAAA,EAAD,CACIC,IAAKF,EACLK,MAAO1B,EACP6B,QAAS,eAEZ,IAERxC,EAAME,KAAO,yBAAK4B,MAAO,CAAE2B,cAAe,KAAU,GACrD,kBAACH,EAAA,EAAD,CAAYC,MAAO,UACdvD,EAAMI,YAAcJ,EAAMI,YAAc,mBAGjD,kBAACiE,EAAA,EAAD,KACKrE,EAAME,MACHF,EAAME,KAAKyB,SAAS,eAAiB,kBAAC2C,EAAA,EAAD,CAAQd,MAAO,UAAWhB,QAAS,YAAaF,QAAS,kBAAMiC,OAAOC,KAAK,iCAAmCxE,EAAMC,KAAO,IAAK,WAAWwE,WAAS,GAApJ,UACrC,GACJ,kBAACH,EAAA,EAAD,CAAQd,MAAO,UAAWhB,QAAS,YAAaF,QAAS,kBAAMiC,OAAOC,KAAKxE,EAAM0E,SAAU,WAAWD,WAAS,GAA/G,iBAIX,kBAAChC,EAAA,EAAD,CAAMM,MAAI,EAACjB,MAAO,CAAE6C,WAAY,QAC7B,kBAACrB,EAAA,EAAD,CAAYd,QAAS,KAAMgB,MAAO,iBAAlC,uDAKZ,oCACI,kBAACf,EAAA,EAAD,CACIC,WAAS,EACTlE,QAAS,EACToE,WAAY,SACZC,QAAS,SACTf,MAAO,CAAE8C,OAAQ,SAEjB,kBAACnC,EAAA,EAAD,CAAMM,MAAI,EAACjB,MAAO,CAAE6B,MAAO,MACvB,kBAACkB,EAAA,EAAD,CAAgBrC,QAAS,SAAUxC,MAAO,KAAM8E,YAAa,Y,4CCzLvF9G,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrC6G,MAAO,CACHpB,MAAOzF,EAAMM,QAAQ,IACrBoG,OAAQ1G,EAAMM,QAAQ,KAE1BwG,QAAS,CACL5G,QAAS,OACTC,eAAgB,SAChBC,SAAU,OACV,QAAS,CACLC,OAAQL,EAAMM,QAAQ,UAgHnByG,EA3GC,SAACvG,GACb,IAAMR,EAAQgH,cACRvG,EAAWD,EAAMC,SACjBC,EAAUZ,IACVmH,EAAUC,YAAclH,EAAMmH,YAAYC,GAAG,OAJ5B,EAKDzG,IAAMC,SAAS,IALd,mBAKhByG,EALgB,KAKXC,EALW,KAmBvB,OAbA3G,IAAMU,WAAU,WACZZ,EAAS,YACT,IACIa,MAAM,4CAA4CC,MAAK,SAACC,GAAD,OACnDA,EAASC,UACXF,MAAK,SAACO,GACJwF,EAAOxF,MAEb,MAAOqB,GACLC,QAAQD,MAAMA,MAGnB,IAEC,oCACI,kBAACoB,EAAA,EAAD,CACIC,WAAS,EACTZ,MAAO,CAAE6B,MAAO,OAAQ5B,QAAS,GAAIsB,UAAW8B,EAAU,OAAS,SACnEtC,QAAS,SACTF,aAAc,SACdC,WAAY,UAEZ,kBAACH,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAInB,MAAO,CAAEC,QAAS,KACxCwD,EAAItF,KACD,oCACI,kBAACqD,EAAA,EAAD,CAAYd,QAAS,KAAMe,MAAO,UAAlC,cACA,kBAACD,EAAA,EAAD,CAAYd,QAAS,KAAMe,MAAO,SAAUkC,UAAW,OAAvD,cAA0EF,EAAItF,KAA9E,MAGA,oCACI,kBAACqD,EAAA,EAAD,CAAYd,QAAS,KAAMe,MAAO,UAAlC,cACA,yBAAK1B,UAAWjD,EAAQoG,SACpB,kBAACU,EAAA,EAAD,CAAU/B,MAAO,IAAKiB,OAAQ,QAMlD,kBAACnC,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAInB,MAAO,CAAE2B,cAAe,KAC/C,yBAAK5B,UAAWjD,EAAQoG,SACpB,kBAAC5C,EAAA,EAAD,CAAQuD,IAAI,aAAaC,IAAKL,EAAIM,WAAYhE,UAAWjD,EAAQmG,UAGzE,yBAAKjD,MAAO,CAAE2B,cAAe,KAC7B,kBAAChB,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAInB,MAAO,CAAE2B,cAAe,KAC/C,yBAAK5B,UAAWjD,EAAQoG,SACpB,kBAACtB,EAAA,EAAD,CAAS5B,MAAO,CAAEgE,SAAU,IAAKnC,MAAO,OAAQoC,SAAU,SAGlE,kBAACtD,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAInB,MAAO,CAAE2B,cAAe,GAAIqC,SAAU,MAC5DP,EAAItF,KACD,oCACI,kBAACqD,EAAA,EAAD,CAAYd,QAAS,QAASe,MAAO,UAArC,oCAAiFgC,EAAIA,IAArF,MAGA,oCACI,yBAAK1D,UAAWjD,EAAQoG,SACpB,kBAACU,EAAA,EAAD,CAAU/B,MAAO,IAAKnB,QAAS,YAMnD,kBAACC,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAInB,MAAO,CAAE2B,cAAe,KAC/C,yBAAK5B,UAAWjD,EAAQoG,SACpB,kBAACtB,EAAA,EAAD,CAAS5B,MAAO,CAAEgE,SAAU,IAAKnC,MAAO,OAAQoC,SAAU,SAGlE,kBAACtD,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAInB,MAAO,CAAE2B,cAAe,KAC/C,kBAACH,EAAA,EAAD,CAAYd,QAAS,KAAMe,MAAO,UAAlC,iBAEJ,kBAACd,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAInB,MAAO,CAAE2B,cAAe,KAC/C,yBAAK5B,UAAWjD,EAAQoG,SACnBO,EAAItF,KACD,oCACI,kBAACgC,EAAA,EAAD,CACI6B,KAAM,kBAACkC,EAAA,EAAD,MACN3D,MAAO,yBACPC,QAAS,kBAAMiC,OAAOC,KAAKe,EAAIb,SAAU,WACzClC,QAAS,aAEb,kBAACP,EAAA,EAAD,CACI6B,KAAM,kBAACmC,EAAA,EAAD,MACN5D,MAAO,yBACPC,QAAS,kBAAMiC,OAAOC,KAAK,kCAC3BhC,QAAS,cAIb,oCACI,kBAACkD,EAAA,EAAD,CAAU/B,MAAO,IAAKnB,QAAS,e,8HCjH9C0D,G,oDACjB,WAAYxH,GAAQ,IAAD,+BACf,cAAMA,IAEDyH,MAAQ,CACTC,SAAS,EACTvC,MAAO,GACPwC,QAAS,IAGb,EAAKC,oBAAsB,EAAKA,oBAAoBC,KAAzB,iBATZ,E,iEAafC,KAAKC,Y,yCAGUC,EAAWC,EAAWC,GACjCF,EAAUG,OAASL,KAAK9H,MAAMmI,MAAML,KAAKC,Y,yKAItBD,KAAK9H,MAApBmI,E,EAAAA,KAAMC,E,EAAAA,KACVC,EAAKF,EAAKvG,MAAM,KAAK,G,yCAETkG,KAAKQ,SAAS,CAAEZ,SAAS,EAAO/E,MAAM,GAAD,OAAKwF,EAAL,2B,uBAE/CL,KAAKQ,SAAS,CAAEZ,SAAS,I,OAC/BI,KAAKS,cAAcF,GAEbG,EAASC,SAASC,cAAc,UAClCC,E,kCAAiCR,E,wCAAoCE,GACrED,IAAMO,GAAG,gBAAaP,IAC1BI,EAAOI,KAAO,kBACdJ,EAAOtB,IAAMyB,EACbH,EAAOK,QAAU,SAAChF,GAAD,OAAO,EAAK+D,oBAAoB/D,IACjD4E,SAASK,KAAKC,YAAYP,G,iJAGV3E,GAChBiE,KAAKQ,SAAS,CACVZ,SAAS,EACT/E,MAAM,GAAD,OAAKmF,KAAK9H,MAAMmI,KAAhB,uB,oCAICE,GACVxC,OAAO,iBAAD,OAAkBwC,IAAQ,SAAUF,GACtC,IAAMa,EAAY,CAAEtB,SAAS,EAAO/E,MAAOwF,EAAKxF,OAAS,MACpDqG,EAAUrG,QACXqG,EAAU7D,MAAQgD,EAAKzG,YACvBsH,EAAUrB,QAAV,UAAuBQ,EAAKc,IAAIC,QAAQ,SAAU,2BAEtDpB,KAAKQ,SAASU,IAChBnB,KAAKC,Q,+BAIP,GAAIA,KAAKL,MAAMC,QACX,OAAO,kBAAC3D,EAAA,EAAD,CACHC,WAAS,EACTZ,MAAO,CAAE6B,MAAO,OAAQ5B,QAAS,GAAI6C,OAAQ,QAC7C/B,QAAS,SACTF,aAAc,SACdC,WAAY,UAEZ,kBAACH,EAAA,EAAD,CAAMM,MAAI,EAACjB,MAAO,CAAE6B,MAAO,MACvB,kBAACkB,EAAA,EAAD,CAAgBrC,QAAS,SAAUxC,MAAO,KAAM8E,YAAa,SAGlE,GAAI0B,KAAKL,MAAM9E,MAClB,OAAO,kBAACoB,EAAA,EAAD,CACHC,WAAS,EACTZ,MAAO,CAAE6B,MAAO,OAAQ5B,QAAS,GAAI6C,OAAQ,QAC7C/B,QAAS,SACTF,aAAc,SACdC,WAAY,UAEZ,kBAACH,EAAA,EAAD,CAAMM,MAAI,EAACjB,MAAO,CAAE6B,MAAO,MACvB,kBAACL,EAAA,EAAD,CAAYd,QAAS,KAAMe,MAAO,SAAUC,MAAO,iBAAnD,wCACA,kBAACqB,EAAA,EAAD,CAAgBrC,QAAS,SAAUxC,MAAO,KAAM8E,YAAa,SAIrE,IAEI+C,GADS,IAAIC,WACAC,gBAAgBvB,KAAKL,MAAME,QAAS,aACtCwB,EAAIG,iBAAiB,cAHEjI,SAAQ,SAAAkI,GAAE,OAAIA,EAAGC,YAIvD,IAAIC,EAAYN,EAAIO,KAAKC,UAAUT,QAAQ,SAAU,IAAIA,QAAQ,UAAW,IAAIlH,OAChF,OAAO,6BAASmB,UAAW,gBAAiByG,wBAAyB,CAAEC,OAAQJ,S,GAzFhDK,aCIrCxK,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,QAAS,OACTC,eAAgB,SAChBC,SAAU,OACV,QAAS,CACLC,OAAQL,EAAMM,QAAQ,UAmJnBiK,GA9ID,SAAC/J,GACX,IAAMgK,EAAqBhK,EAAMgK,mBAC3BC,EAAejK,EAAMiK,aACrBC,EAAWlK,EAAMmK,OACjBC,EAAepK,EAAMoK,aACrBlK,EAAUZ,KACVW,EAAWD,EAAMC,SANF,EAOKE,IAAMC,SAAS,IAPpB,mBAOdiK,EAPc,KAOPC,EAPO,OAQOnK,IAAMC,WARb,mBAQdmK,EARc,KAQNC,EARM,OASWrK,IAAMC,UAAS,GAT1B,mBASdqK,EATc,KASJC,EATI,KAUfC,EAAa,SAAC3K,GAAW,IACnBmF,EAA2BnF,EAA3BmF,MAAOzD,EAAoB1B,EAApB0B,YAAakJ,EAAO5K,EAAP4K,GAC5B,OACI,kBAAChF,EAAA,EAAD,CAAQd,MAAO,UAAWlB,QAAS,WAC/BwG,EAAalI,KAAK2I,OAClBH,GAAY,GACZT,EAAa9E,GACb6E,EAAmBtI,IACpBqF,UAAW5G,IAAM2K,SAChB,kBAAM3K,IAAM4K,YAAW,SAACC,EAAWC,GAAZ,OAAoB,kBAAC,IAAD,eAAYL,GAAIA,EAAIK,IAAKA,GAASD,SAC7E,CAACJ,IACF9G,QAAS,YAAaiC,WAAS,GARlC,cAiDR,OAtCA5F,IAAMU,WAAU,WACRqJ,GACAM,EAAUN,GACVQ,GAAY,IAEZF,OAAU/I,KAEf,CAACyI,IACJ/J,IAAMU,WAAU,WACZZ,EAAS,SACT,IACIa,MAAM,kDAAkDC,MAAK,SAACC,GAAD,OACzDA,EAASC,UACXF,MAAK,SAACG,GACJ,IAAIE,EAAY,GAChBF,EAAOG,SAAQ,SAAA6J,GACX,IAAIC,EAAWD,EAAKxJ,YAAYE,MAAM,KAClCgH,EAAOuC,EAAS,GAAGnJ,OACV,SAAT4G,IACAxH,GAAW,IAAIc,KAAKgJ,EAAKE,aAAeF,EACxC9J,GAAW,IAAIc,KAAKgJ,EAAKE,aAAzB,KAAgDxC,EAChDxH,GAAW,IAAIc,KAAKgJ,EAAKE,aAAzB,MAAiDD,EAAS,GAAGnJ,OAC7DZ,GAAW,IAAIc,KAAKgJ,EAAKE,aAAzB,YAAuDD,EAAS,GAAGnJ,WAG3E,IAAII,EAAS,GACbC,OAAOC,KAAKlB,GAAWmB,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAID,KAAGnB,SAAQ,SAACC,GAAD,OAAWc,EAAOM,KAAKtB,EAAUE,OACtF,IAAI+J,EAAW,GACfjJ,EAAOf,SAAQ,SAACiK,GACZD,EAASC,EAAWjD,IAAMiD,KAE9BhB,EAASe,MAEf,MAAO1I,GACLC,QAAQD,MAAMA,MAGnB,IAEC,oCACI,kBAAC4I,EAAA,EAAD,CACIC,YAAU,EACV1F,KAAM2E,EACNgB,QAAS,WACLxB,EAAa,IACbD,EAAmB,IACnBU,GAAY,KAGhB,kBAACgB,EAAA,EAAD,CAAavI,UAAWjD,EAAQT,MAAO4K,GAASA,EAAME,GAAUF,EAAME,GAAQpF,MAAQ,kBAAC6B,EAAA,EAAD,CAAU/B,MAAO,IAAKiB,OAAQ,MACpH,kBAACyF,EAAA,EAAD,KACI,kBAAC,GAAD,CACIxD,KAAM,eAAiBoC,EACvBnC,KAAM,cAGd,kBAACwD,GAAA,EAAD,KACI,kBAAChG,EAAA,EAAD,CAAQ9B,QAAS,YAAaF,QAAS,WACnCqG,EAAa,IACbD,EAAmB,IACnBU,GAAY,IACb5F,MAAO,WAJV,WAOR,kBAACf,EAAA,EAAD,CACIC,WAAS,EACTZ,MAAO,CAAE6B,MAAO,OAAQ5B,QAAS,GAAI6C,OAAQ,QAC7C/B,QAAS,SACTF,aAAc,SACdC,WAAY,UAEmB,IAA9B7B,OAAOC,KAAK+H,GAAOxI,OAChBQ,OAAOwJ,OAAOxB,GAAOvI,KAAI,SAACoJ,EAAM9G,GAAP,OACrB,kBAACL,EAAA,EAAD,CAAMP,IAAKY,EAAGC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGpB,MAAO,CAAEC,QAAS,KACvD,kBAACoB,EAAA,EAAD,CAAMX,QAAS,YACX,kBAACY,EAAA,EAAD,CAAatB,MAAO,CAAEuB,UAAW,MAC7B,kBAACC,EAAA,EAAD,CAAYd,QAAS,KAAMe,MAAO,SAAUC,MAAO,eAC9CoG,EAAK/F,OAEV,yBAAK/B,MAAO,CAAE2B,cAAe,MAC7B,kBAACC,EAAA,EAAD,MACA,yBAAK5B,MAAO,CAAE2B,cAAe,MAC7B,kBAAChB,EAAA,EAAD,CACIC,WAAS,EACTb,UAAWjD,EAAQT,KACnB2D,MAAO,CAAE6B,MAAO,SAEhB,kBAAClB,EAAA,EAAD,CAAMM,MAAI,GACN,kBAACa,EAAA,EAAD,CAASC,MAAO,eACZ,kBAAC5B,EAAA,EAAD,CACI6B,KAAM,kBAAC0G,GAAA,EAAD,MACNnI,MAAO,IAAIzB,KAAKgJ,EAAKE,YAAY7F,qBAAuB,KAAO,IAAIrD,KAAKgJ,EAAKE,YAAY5F,qBACzF1B,QAAS,gBAKzB,yBAAKV,MAAO,CAAE2B,cAAe,MAC7B,kBAACC,EAAA,EAAD,MACA,yBAAK5B,MAAO,CAAE2B,cAAe,MAC7B,kBAACH,EAAA,EAAD,CAAYC,MAAO,UACdqG,EAAKxJ,YAAcwJ,EAAKxJ,YAAc,mBAG/C,kBAACiE,EAAA,EAAD,KACI,kBAACgF,EAAD,CAAYxF,MAAO+F,EAAK/F,MAAOzD,YAAawJ,EAAKxJ,YAAakJ,GAAI,sBAAwBM,EAAK7C,WAK/G,kBAACtE,EAAA,EAAD,CAAMM,MAAI,EAACjB,MAAO,CAAE6B,MAAO,MACvB,kBAACkB,EAAA,EAAD,CAAgBrC,QAAS,SAAUxC,MAAO,KAAM8E,YAAa,W,qOC0VtE2F,GA5eD,SAAC/L,GACX,IAAMR,EAAQgH,cACRgF,EAAa9E,YAAclH,EAAMmH,YAAYqF,KAAK,OAFnC,EAGiB7L,IAAMC,UAAS,GAHhC,mBAGd6L,EAHc,KAGDC,EAHC,OAIa/L,IAAMC,UAAS,GAJ5B,mBAId+L,EAJc,KAIHC,EAJG,OAKuBjM,IAAMC,WAL7B,mBAKdiM,EALc,KAKEC,EALF,OAManM,IAAMC,UAAS,GAN5B,mBAMdmM,EANc,KAMHC,EANG,OAOmBrM,IAAMC,WAPzB,mBAOdqM,EAPc,KAOAC,EAPA,OAQevM,IAAMC,WARrB,mBAQduM,EARc,KAQFC,EARE,OASqBzM,IAAMC,WAT3B,mBASdyM,EATc,KASCC,EATD,OAUa3M,IAAMC,WAVnB,mBAUd2M,EAVc,KAUHC,EAVG,OAWO7M,IAAMC,WAXb,mBAWd6M,EAXc,KAWNC,GAXM,QAYW/M,IAAMC,UAAS,GAZ1B,qBAYd+M,GAZc,MAYJC,GAZI,SAayBjN,IAAMC,SAAS,WAbxC,qBAadiN,GAbc,MAaGC,GAbH,SAc6BnN,IAAMC,WAdnC,qBAcdmN,GAdc,MAcKC,GAdL,SAemBrN,IAAMC,SAAS,GAflC,qBAedqN,GAfc,MAeAC,GAfA,SAgBiBvN,IAAMC,SAASJ,EAAM2N,OAAS,2BAA6B,sBAhB5E,qBAgBdC,GAhBc,MAgBDC,GAhBC,SAiBa1N,IAAMC,SAASJ,EAAM2N,OAAS,QAAU,SAjBrD,qBAiBdG,GAjBc,MAiBHC,GAjBG,MAkBf9N,GAAWD,EAAMC,SACjB0N,GAAS3N,EAAM2N,OAsGrB,OArGAK,YAASf,OAAOgB,iBAAmBH,GACnC3N,IAAMU,WAAU,WACR8M,IACAE,GAAe,4BACfE,GAAa,WAEbF,GAAe,sBACfE,GAAa,YAElB,CAACJ,KACJxN,IAAMU,WAAU,WACZ,IAAIqN,EAAYrI,OAAOsI,WAAW,2BAC9BD,EAAUE,QACVlC,GAAe,GAEfA,GAAe,GAGnBgC,EAAUG,iBAAiB,UAAU,SAACC,GAC9BA,EAAYF,QACZlC,GAAe,GAGfA,GAAe,QAGxB,IACH/L,IAAMU,WAAU,WACZZ,GAAS,oBACTa,MAAM,sCAAsCC,MAAK,SAACC,GAAD,OAC7CA,EAASC,UACXF,MAAK,SAACO,GACAA,GAASA,EAAMiN,YAAcjN,EAAMkN,QAAQvL,SAAS,aACpDqJ,EAAkBhL,EAAMiN,WACxB3B,EAAc,IAAI1K,KAAKZ,EAAMY,MAAMuM,kBACnCvB,GAAU5L,EAAMoN,SAEhBtC,GAAa,MAElBuC,OAAM,SAACC,GAAD,OAAYhM,QAAQD,MAAMiM,QAEpC,IACHzO,IAAMU,WAAU,WACZ,GAAIwL,EAAgB,CAChB,IAAIwC,EAAe,GACfC,EAAY,GAChB,YAAIzC,GAAgB9J,MAAK,SAACC,EAAGC,GACzB,OAAI8J,EACO9J,EAAEsM,eAAiBvM,EAAEuM,eAErBtM,EAAEuM,aAAexM,EAAEwM,gBAE/B3N,SAAQ,SAAC4N,EAAS3L,GACjBuL,EAAaI,EAAQC,aAAeD,EAAQE,QAC5CF,EAAO,KAAWG,KAAKC,MAAM/L,EAAQ,GAAK,IAC1C2L,EAAO,KAAW3L,EAAQ,EACrBwL,EAAUM,KAAKC,MAAM/L,EAAQ,GAAK,KAGnCwL,EAAUM,KAAKC,MAAM/L,EAAQ,GAAK,KAAKZ,KAAKuM,GAF5CH,EAAUM,KAAKC,MAAM/L,EAAQ,GAAK,KAAO,CAAC2L,MAKlDnC,EAAiB+B,GACjBnC,EAAgBoC,MAErB,CAACvC,EAAWF,IACflM,IAAMU,WAAU,WACZ,GAAI4L,EAAc,CACd,IAAI6C,EAAc,CAAC,GAAI,IACnBC,EAAY,GACZC,EAAY,GACZC,EAAS,GACbpN,OAAOwJ,OAAOY,EAAagB,KAAepM,SAAQ,SAAC4N,GAC3C1C,GACAgD,EAAU7M,KAAKuM,EAAQF,gBACvBS,EAAU9M,KAAKuM,EAAQS,gBACvBD,EAAO/M,KAAKuM,EAAQU,eAEpBJ,EAAU7M,KAAKuM,EAAQD,cACvBQ,EAAU9M,KAAKuM,EAAQW,cACvBH,EAAO/M,KAAKuM,EAAQY,YAExBP,EAAY,GAAG5M,KAAKuM,EAAQC,gBAEhCI,EAAY,GAAK,CAAC,CACdQ,KAAMP,EACN5L,MAAO4I,EAAY,oBAAsB,gBACzCwD,gBAAiB,yBAClB,CACCD,KAAMN,EACN7L,MAAO4I,EAAY,oBAAsB,gBACzCwD,gBAAiB,wBAClB,CACCD,KAAML,EACN9L,MAAO4I,EAAY,iBAAmB,aACtCwD,gBAAiB,yBAGzB/C,EAAasC,KAEd,CAAC7C,EAAcgB,GAAclB,IAE5B,oCACI,kBAAChB,EAAA,EAAD,CACIxF,WAAS,EACTyF,WAAYA,EACZpE,SAAU,KACVtB,KAA0B,YAApBuH,GACN5B,QAAS,WACL6B,GAAmB,aAGF,YAApBD,IAAiCE,GAAoB,oCAElD,kBAAC7B,EAAA,EAAD,CAAatI,MAAO,CAAE4M,UAAW,WAC5BzC,GAAoBA,GAAkB4B,QAAU,MAErD,kBAACxD,EAAA,EAAD,KACI,kBAAC5H,EAAA,EAAD,CACIC,WAAS,EACTC,aAAc,SACdC,WAAY,SACZC,QAAS,UAET,kBAACJ,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGnB,MAAO,CAAEuB,UAAW,SAC1C,kBAAC,OAAD,CACImL,KAAM,CACFG,SAAU,CAAC,CACPH,KAAM,CACkB,YAApBzC,GAAiCd,EAAYgB,GAAkBwB,eAAiBxB,GAAkByB,aAAgB,EAC9F,YAApB3B,GAAiCd,EAAYgB,GAAkBmC,eAAiBnC,GAAkBqC,aAAgB,EAC9F,YAApBvC,GAAiCd,EAAYgB,GAAkBoC,YAAcpC,GAAkBsC,UAAa,GAEhHE,gBAAiB,CACb,wBACA,uBACA,wBAEJpM,MAAO,cAEXuM,OAAQ,CACJ3D,EAAY,oBAAsB,gBAClCA,EAAY,oBAAsB,gBAClCA,EAAY,iBAAmB,eAGvC4D,QAAS,CACLC,qBAAqB,EACrBC,YAAY,EACZC,SAAU,CACNC,UAAW,CACPpL,MAAO,SAAUqL,EAAaV,GAC1B,OAAOA,EAAI,OAAWU,EAAY,GAAZ,QAE1B7M,MAAO,SAAU6M,EAAaV,GAC1B,OAAOA,EAAI,SAAa,GAAjB,KAA4BU,EAAW,OAAW/B,oBAIrEgC,OAAQ,CACJC,SAAU,aAK1B,kBAAC3M,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,IACnB,kBAACoM,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAOC,aAAW,gBACd,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAWnM,MAAM,UAAjB,SAAiC0H,EAAY,gBAAkB,YAA/D,KACA,kBAACyE,GAAA,EAAD,CAAWnM,MAAM,UAAjB,SAAiC0H,EAAY,gBAAkB,YAA/D,KACA,kBAACyE,GAAA,EAAD,CAAWnM,MAAM,UAAU0H,EAAY,oBAAsB,iBAC7D,kBAACyE,GAAA,EAAD,CAAWnM,MAAM,UAAU0H,EAAY,oBAAsB,iBAC7D,kBAACyE,GAAA,EAAD,CAAWnM,MAAM,UAAU0H,EAAY,iBAAmB,gBAGlE,kBAAC0E,GAAA,EAAD,KACI,kBAACF,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAWnM,MAAM,UAAU0I,GAAoBA,GAAkB2D,KAAKzC,iBAAmB,GACzF,kBAACuC,GAAA,EAAD,CAAWnM,MAAM,UAAU0I,GAAoBA,GAAkB4D,KAAK1C,iBAAmB,GACzF,kBAACuC,GAAA,EAAD,CAAWnM,MAAM,UAAU0I,GAAqBhB,EAAYgB,GAAkBwB,eAAeN,iBAAmB,MAASlB,GAAkBwB,gBAAkBxB,GAAkBwB,eAAiBxB,GAAkBmC,eAAiBnC,GAAkBoC,aAAgB,KAAKyB,QAAQ,GAAK,KAAO7D,GAAkByB,aAAaP,iBAAmB,MAASlB,GAAkByB,cAAgBzB,GAAkByB,aAAezB,GAAkBqC,aAAerC,GAAkBsC,WAAc,KAAKuB,QAAQ,GAAK,KAAQ,GACvf,kBAACJ,GAAA,EAAD,CAAWnM,MAAM,UAAU0I,GAAqBhB,EAAYgB,GAAkBmC,eAAejB,iBAAmB,MAASlB,GAAkBmC,gBAAkBnC,GAAkBwB,eAAiBxB,GAAkBmC,eAAiBnC,GAAkBoC,aAAgB,KAAKyB,QAAQ,GAAK,KAAO7D,GAAkBqC,aAAanB,iBAAmB,MAASlB,GAAkBqC,cAAgBrC,GAAkByB,aAAezB,GAAkBqC,aAAerC,GAAkBsC,WAAc,KAAKuB,QAAQ,GAAK,KAAQ,GACvf,kBAACJ,GAAA,EAAD,CAAWnM,MAAM,UAAU0I,GAAqBhB,EAAYgB,GAAkBoC,YAAYlB,iBAAmB,MAASlB,GAAkBoC,aAAepC,GAAkBwB,eAAiBxB,GAAkBmC,eAAiBnC,GAAkBoC,aAAgB,KAAKyB,QAAQ,GAAK,KAAO7D,GAAkBsC,UAAUpB,iBAAmB,MAASlB,GAAkBsC,WAAatC,GAAkByB,aAAezB,GAAkBqC,aAAerC,GAAkBsC,WAAc,KAAKuB,QAAQ,GAAK,KAAQ,UAQvgB,kBAACxF,GAAA,EAAD,KACI,kBAAChG,EAAA,EAAD,CAAQG,WAAS,EAACjC,QAAS,YAAagB,MAAO,UAAWlB,QAAS,kBAAM0J,GAAmB,aAA5F,WACkB,MAE9B,kBAAC/B,EAAA,EAAD,CACIzF,KAAMqH,GACN1B,QAAS,WACL2B,IAAY,KAGhB,kBAAC1B,EAAA,EAAD,CAAatI,MAAO,CAAE4M,UAAW,WAAjC,QACUvC,IAEV,kBAAC9B,EAAA,EAAD,KACI,kBAAC5H,EAAA,EAAD,CACIC,WAAS,EACTC,aAAc,SACdC,WAAY,SACZC,QAAS,UAET,kBAACJ,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,IACnB,kBAACK,EAAA,EAAD,CAAYd,QAAS,YAAagB,MAAO,gBAAiBD,MAAO,UAAjE,4CAA2I,IAApB4I,GAAe,GAAW,EAAjJ,OAAyK,GAAhBA,GAAzJ,QAIZ,kBAAC7B,GAAA,EAAD,KACI,kBAAChG,EAAA,EAAD,CAAQG,WAAS,EAACjC,QAAS,YAAagB,MAAO,UAAWlB,QAAS,kBAAMwJ,IAAY,KAArF,WAGR,kBAAC7B,EAAA,EAAD,CACIzF,KAAMqG,EACNV,QAAS,WACLW,GAAa,KAGjB,kBAACT,EAAA,EAAD,KACI,kBAAC5H,EAAA,EAAD,CACIC,WAAS,EACTC,aAAc,SACdC,WAAY,SACZC,QAAS,UAET,kBAACJ,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,IACnB,kBAACK,EAAA,EAAD,CAAYd,QAAS,YAAagB,MAAO,gBAAiBD,MAAO,UAAjE,8DAIZ,kBAAC+G,GAAA,EAAD,KACI,kBAAChG,EAAA,EAAD,CAAQG,WAAS,EAACnC,QAAS,kBAAMwI,GAAa,KAA9C,WAGR,kBAACb,EAAA,EAAD,CACIzF,MAAOmG,GAEP,kBAACN,EAAA,EAAD,KACI,kBAAC5H,EAAA,EAAD,CACIC,WAAS,EACTC,aAAc,SACdC,WAAY,SACZC,QAAS,UAET,kBAACJ,EAAA,EAAD,CAAMM,MAAI,GACN,kBAACgN,GAAA,EAAD,CAAaC,SAAU,QAASnO,UAAW,uBAE/C,kBAACY,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,IACnB,kBAACK,EAAA,EAAD,CAAYd,QAAS,YAAagB,MAAO,gBAAiBD,MAAO,UAAjE,kDAKfoH,EAAc,kBAAClI,EAAA,EAAD,CAAMC,WAAS,GAC1B,kBAACD,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAACR,EAAA,EAAD,CACIC,WAAS,EACTG,QAAS,SACTF,aAAc,SACdC,WAAY,SACZd,MAAO,CAAE8C,OAAQ,uBAEjB,kBAACnC,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAGC,GAAI,IAClB,kBAACR,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,IACnB,kBAACR,EAAA,EAAD,CACIC,WAAS,EACTG,QAAS,SACTF,aAAc,SACdC,WAAY,UAEZ,kBAACH,EAAA,EAAD,CAAMM,MAAI,GACN,kBAACkN,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACIjQ,KAAK,cACLD,MAAOiL,EAAY,EAAI,EACvBkF,SAAU,SAACC,EAAOpQ,GAAR,OAAsC,IAApBqQ,SAASrQ,GAAekL,GAAa,GAAQA,GAAa,KAEtF,kBAACoF,GAAA,EAAD,CAAkBtQ,MAAO,EAAGuQ,QAAS,kBAACC,GAAA,EAAD,MAAWnO,MAAM,kBACtD,kBAACiO,GAAA,EAAD,CAAkBtQ,MAAO,EAAGuQ,QAAS,kBAACC,GAAA,EAAD,MAAWnO,MAAM,mBAM1E,kBAACI,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,IACnB,kBAACR,EAAA,EAAD,CACIC,WAAS,EACTG,QAAS,SACTF,aAAc,SACdC,WAAY,UAEZ,kBAACH,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,IACnB,yBAAKnB,MAAO,CAAEC,QAAS,KACnB,kBAAC0O,GAAA,EAAD,CAAQjO,QAAS,WAAY2N,SAAU,SAACC,GACpCpE,GAAmBoE,EAAMM,OAAO1Q,OAChCkM,GAAqByE,KAAKC,MAAMR,EAAMM,OAAO1Q,SAC9CyE,WAAS,EAACoM,QAAM,EAAC7Q,MAAO+L,GAAiBhF,GAAG,yBAC1CoE,EACG,oCACI,4BAAQoE,aAAW,OAAOvP,MAAO,UAAW8Q,UAAQ,GAApD,oBACC/P,OAAOC,KAAKmK,GAAc3K,KAAI,SAACoP,EAAM5N,GAAP,OAC3B,8BAAUE,IAAKF,EAAOK,MAAO,QAAUuN,GAClC7O,OAAOwJ,OAAOY,EAAayE,IAAOpP,KAAI,SAACmN,EAAS3L,GAAV,OACnC,4BAAQE,IAAKF,EAAOhC,MAAO2Q,KAAKI,UAAUpD,IAAWA,EAAQE,QAAU,KAAOF,EAAQC,YAAc,aAKpH,4BAAQ2B,aAAW,OAAOvP,MAAO,UAAW8Q,UAAQ,GAApD,oBAQhC,kBAACE,GAAA,EAAD,CAAQC,QAAM,GACV,kBAACxO,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAInB,MAAO,CAAEC,QAAS,KAAM,kBAAC2B,EAAA,EAAD,QAEvD,kBAACjB,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAGC,GAAI,IAClB,kBAACR,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,IACnB,kBAACR,EAAA,EAAD,CACIC,WAAS,EACTG,QAAS,SACTF,aAAc,SACdC,WAAY,UAEZ,kBAACH,EAAA,EAAD,CAAMM,MAAI,GACN,kBAACmO,EAAA,EAAD,CAAUpP,MAAO,CAAE6B,MAAO,MACtB,kBAACwN,GAAA,EAAD,KACI,kBAAC/O,EAAA,EAAD,CAAQN,MAAO,CAAE2M,gBAAiB,0BAE7BxD,EAAY,kBAACmG,GAAA,EAAD,MAAY,kBAACC,GAAA,EAAD,QAGjC,kBAACC,EAAA,EAAD,CAAcC,QAAQ,YAAYC,UAAW7F,EAAUV,EAAaU,EAAO8B,eAAiB9B,EAAO8B,eAAeN,iBAAmB,EAAMxB,EAAO+B,aAAe/B,EAAO+B,aAAaP,iBAAmB,EAAM,QAK9N,kBAAC1K,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,IACnB,kBAACR,EAAA,EAAD,CACIC,WAAS,EACTG,QAAS,SACTF,aAAc,SACdC,WAAY,UAEZ,kBAACH,EAAA,EAAD,CAAMM,MAAI,GACN,kBAACmO,EAAA,EAAD,CAAUpP,MAAO,CAAE6B,MAAO,MACtB,kBAACwN,GAAA,EAAD,KACI,kBAAC/O,EAAA,EAAD,CAAQN,MAAO,CAAE2M,gBAAiB,yBAC7BxD,EAAY,kBAACwG,GAAA,EAAD,MAAe,kBAACC,GAAA,EAAD,QAGpC,kBAACJ,EAAA,EAAD,CAAcC,QAAQ,YAAYC,UAAW7F,EAAUV,EAAaU,EAAOyC,eAAiBzC,EAAOyC,eAAejB,iBAAmB,EAAMxB,EAAO2C,aAAe3C,EAAO2C,aAAanB,iBAAmB,EAAM,QAK9N,kBAAC1K,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,IACnB,kBAACR,EAAA,EAAD,CACIC,WAAS,EACTG,QAAS,SACTF,aAAc,SACdC,WAAY,UAEZ,kBAACH,EAAA,EAAD,CAAMM,MAAI,GACN,kBAACmO,EAAA,EAAD,CAAUpP,MAAO,CAAE6B,MAAO,MACtB,kBAACwN,GAAA,EAAD,KACI,kBAAC/O,EAAA,EAAD,CAAQN,MAAO,CAAE2M,gBAAiB,yBAC7BxD,EAAY,kBAAC0G,GAAA,EAAD,MAAmB,kBAACC,GAAA,EAAD,QAGxC,kBAACN,EAAA,EAAD,CAAcC,QAAQ,SAASC,UAAW7F,EAAUV,EAAaU,EAAO0C,YAAc1C,EAAO0C,YAAYlB,iBAAmB,EAAMxB,EAAO4C,UAAY5C,EAAO4C,UAAUpB,iBAAmB,EAAM,YAU/N,kBAAC1K,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAInB,MAAO,CAAEC,QAAS,KACzC,kBAACU,EAAA,EAAD,CACIC,WAAS,EACTG,QAAS,SACTF,aAAc,SACdC,WAAY,SACZd,MAAO,CAAE8C,OAAQ,uBAEjB,kBAACnC,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,IACnB,kBAACR,EAAA,EAAD,CACIC,WAAS,EACTZ,MAAO,CAAE6B,MAAO,QAChBkO,UAAW,MACXhP,QAAS,SACTF,aAAc,SACdC,WAAY,UAEZ,kBAACU,EAAA,EAAD,CAAYd,QAAS,KAAMe,MAAO,UAAlC,QAAkD4I,GAAlD,cAAsF,kBAAC2F,EAAA,EAAD,CAAYxP,QAAS,kBAAMwJ,IAAY,KAAO,kBAACiG,GAAA,EAAD,SAG5I,kBAACtP,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAInB,MAAO,CAAE8C,OAAQ,SACxC,kBAAC,OAAD,CACI4J,KAAM,CACFG,SAAUlD,EAAYA,EAAU,GAAK,GACrCmD,OAAQnD,EAAYA,EAAU,GAAK,IAEvCoD,QAAS,CACLC,qBAAqB,EACrBC,YAAY,EACZiD,OAAQ,CACJC,MAAO,CAAC,CACJC,UAAW,CACP1O,MAAO8I,GACP6F,cAAe7F,MAGvB8F,MAAO,CAAC,CACJF,UAAW,CACP1O,MAAO8I,GACP6F,cAAe7F,OAI3BzI,MAAO,CACHzF,UAASiN,EACTgH,KAAM,kBAAoBhH,EAAa,wCACvC+D,SAAU,UAEdJ,SAAU,CACNC,UAAW,CACP5M,MAAO,SAAC6M,EAAaV,GACjB,OAAOU,EAAYoD,OAAOnF,kBAE9BtJ,MAAO,SAACqL,EAAaV,GACjB,OAAOjD,EAAc2D,EAAY,GAAG7M,cAO5D,kBAACI,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,IACnB,kBAACR,EAAA,EAAD,CACIC,WAAS,EACTG,QAAS,SACTF,aAAc,SACdC,WAAY,SACZd,MAAO,CAAE2B,cAAe,KAExB,kBAAC8O,GAAA,EAAD,CAAYpC,SAAU,SAACC,EAAOoC,GAAR,OAAiBpG,GAAgBoG,IAAOC,MAAOtH,EAAepK,OAAOC,KAAKmK,GAAc5K,OAAS,SAKjI,OCjehBvC,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFuU,SAAU,GAEdC,WAAY,CACRC,YAAa1U,EAAMM,QAAQ,IAE/BqF,MAAO,CACH6O,SAAU,OAoKHG,GAhKH,WACR,IAAMjU,EAAUZ,KADF,EAGoBa,IAAMC,WAH1B,mBAGIgK,GAHJ,aAIyBjK,IAAMC,SAAS,IAAIgU,gBAAgBvO,OAAOwO,SAASC,SAJ5E,mBAIPC,EAJO,KAIQC,EAJR,KAKRC,EAAUF,EAAcG,IAAI,WAC5BrM,EAAKkM,EAAcG,IAAI,MANf,EAOYvU,IAAMC,SAAS,IAP3B,mBAOP+E,EAPO,KAOAlF,EAPA,OAQoBE,IAAMC,SAAS,IARnC,mBAQPuU,EARO,KAQI1K,EARJ,OASgC9J,IAAMC,SAAS,IAT/C,mBASPwU,EATO,KASU5K,EATV,OAUsB7J,IAAMC,UAAS,GAVrC,mBAUPyU,EAVO,KAUKC,EAVL,OAWc3U,IAAMC,SAASyF,OAAOsI,WAAW,gCAAgCC,SAX/E,oBAWPT,GAXO,MAWCoH,GAXD,MAYRC,GAAe,SAAChV,GAAW,IACrBoF,EAAsBpF,EAAtBoF,KAAMyN,EAAgB7S,EAAhB6S,QAASjI,EAAO5K,EAAP4K,GACvB,OACI,kBAAC4H,EAAA,EAAD,CAAUyC,SAAU9P,IAAU0N,EAASjP,QAAS,kBAAMkR,GAAc,IAAQI,QAAM,EAACnO,UAAW5G,IAAM2K,SAChG,kBAAM3K,IAAM4K,YAAW,SAACC,EAAWC,GAAZ,OAAoB,kBAAC,IAAD,eAAYL,GAAIA,EAAIK,IAAKA,GAASD,SAC7E,CAACJ,KAEAxF,EAAO,kBAAC+P,EAAA,EAAD,KAAe/P,GAAuB,KAC9C,kBAACwN,EAAA,EAAD,CAAcC,QAASA,MAInChN,OAAOsI,WAAW,gCAAgCE,iBAAiB,UAAU,SAAAqD,GACrEA,EAAMtD,QACN2G,IAAU,GAEVA,IAAU,MAGlB,IAAMvV,GAAQ4V,YAAe,CACzBC,QAAS,CACLxC,QAAS,CACLyC,KAAM,WAEVxC,UAAW,CACPwC,KAAM,WAEV1M,KAAM+E,GAAS,OAAS,WA0ChC,OAvCAxN,IAAMU,WAAU,WACZ2T,EAAc,IAAIJ,gBAAgBvO,OAAOwO,SAASC,WAEnD,CAACzO,OAAOwO,SAASC,SACpBnU,IAAMU,WAAU,WACZ,GAAgB,OAAZ4T,EACA,GAAgB,UAAZA,EACA,GAAW,OAAPpM,EACA,IACIvH,MAAM,gCAAkCuH,GAAItH,MAAK,SAACC,GAAD,OAC7CA,EAASC,UACXF,MAAK,SAACG,GACJ,GAAIA,GAAUA,EAAOQ,YAAa,CAC9B,IAAM6T,EAAWrU,EAAOQ,YAAYE,MAAM,KAC1C,GAA2B,SAAvB2T,EAAS,GAAGvT,OAAmB,CAC/B,IAAMwT,EAAYD,EAAS,GAAGvT,OACxByT,EAAkBF,EAAS,GAAGvT,OACpCiI,EAAauL,EAAU,GAAGE,cAAgBF,EAAUG,MAAM,IAC1D3L,EAAmByL,QAEnBxL,EAAa,cAGjBA,EAAa,YAGvB,MAAOtH,GACLC,QAAQD,MAAMA,QAGlBsH,EAAawK,EAAQ,GAAGiB,cAAgBjB,EAAQkB,MAAM,SAG1D1L,EAAawK,EAAQ,GAAGiB,cAAgBjB,EAAQkB,MAAM,MAI/D,CAACpB,IAGA,oCACI,kBAACqB,EAAA,EAAD,KACI,+BAAsB,KAAdjB,GAAkC,YAAdA,EAA0BA,EAAY,oBAClE,0BAAMpT,KAAK,cAAcoG,QAA6B,KAApBiN,EAAyBA,EAAkB,kCAEjF,kBAACiB,EAAA,EAAD,CAAerW,MAAOA,IAClB,kBAACsW,EAAA,EAAD,MACA,kBAAC,IAAD,KACI,kBAACC,EAAA,EAAD,CAAiBC,OAAQ,OAAQlQ,KAAM+O,EAAYpJ,QAAS,kBAAMqJ,GAAc,IAAQmB,OAAQ,kBAAMnB,GAAc,KAChH,yBAAK1R,MAAO,CAAE6B,MAAO,OAAQiB,OAAQ,SAAWgQ,KAAM,gBAClD,kBAACnS,EAAA,EAAD,CACIC,WAAS,EACTZ,MAAO,CAAE6B,MAAO,IAAKiB,OAAQ,QAC7B/B,QAAS,SACTF,aAAc,SACdC,WAAY,UAEZ,kBAACU,EAAA,EAAD,CAAYC,MAAO,SAAUC,MAAO,cAAehB,QAAS,MAA5D,WACA,kBAACC,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC3B,yBAAKpB,MAAO,CAAE2B,cAAe,OAEjC,kBAAChB,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC3B,kBAACwQ,GAAD,CAAcpK,GAAI,oBAAqBiI,QAAS,mBAAoBzN,KAAM,kBAAC+Q,EAAA,EAAD,SAE9E,kBAACpS,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC3B,kBAACwQ,GAAD,CAAcpK,GAAI,sBAAuBiI,QAAS,WAAYzN,KAAM,kBAACgR,EAAA,EAAD,SAExE,kBAACrS,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC3B,kBAACwQ,GAAD,CAAcpK,GAAI,qBAAsBiI,QAAS,WAAYzN,KAAM,kBAACiR,EAAA,EAAD,SAEvE,kBAACtS,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC3B,kBAACwQ,GAAD,CAAcpK,GAAI,kBAAmBiI,QAAS,QAASzN,KAAM,kBAACkR,EAAA,EAAD,SAEjE,kBAACvS,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC3B,yBAAKpB,MAAO,CAAE2B,cAAe,OAEjC,kBAAChB,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC3B,kBAACQ,EAAA,EAAD,OAEJ,kBAACJ,EAAA,EAAD,CAAYC,MAAO,SAAUC,MAAO,gBAAiBhB,QAAS,WAA9D,mBAA2F,IAAI5B,MAAOqU,cAAtG,oBACA,kBAACxS,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC3B,kBAACQ,EAAA,EAAD,UAKhB,kBAACwR,EAAA,EAAD,CAAQ9F,SAAU,SAAU5M,QAAS,aACjC,kBAAC2S,EAAA,EAAD,CAAS3S,QAAS,SACd,kBAACsP,EAAA,EAAD,CAAYsD,KAAM,QAASvT,UAAWjD,EAAQ+T,WAAYrQ,QAAS,kBAAMkR,GAAc,IAAOhQ,MAAM,UAAU+L,aAAW,QACrH,kBAAC8F,EAAA,EAAD,OAEJ,kBAAC/R,EAAA,EAAD,CAAYd,QAAS,KAAMX,UAAWjD,EAAQiF,OACzCA,GAEL,kBAACD,EAAA,EAAD,CAASC,MAAOwI,GAAS,uBAAyB,uBAC9C,kBAACyF,EAAA,EAAD,CAAYxP,QAAS,kBAAMmR,IAAWpH,MACjCA,GAAS,kBAACiJ,EAAA,EAAD,CAAaxT,MAAO,CAAE0B,MAAO,WAAgB,kBAAC+R,EAAA,EAAD,CAAazT,MAAO,CAAE0B,MAAO,eAKnG2P,EACe,UAAZA,EAAsB,kBAAC,GAAD,CAAOtK,OAAQ9B,EAAI4B,aAAc,SAACxC,GAAD,OAAWwC,EAAaxC,IAAQuC,mBAAoB,SAACvC,GAAD,OAAWuC,EAAmBvC,IAAQ2C,aAAc,SAAC3C,GAAD,OAAW2C,EAAa3C,IAAQxH,SAAU,SAACkF,GAAD,OAAWlF,EAASkF,MAC7M,aAAZsP,EAAyB,kBAAC,EAAD,CAAUxU,SAAU,SAACkF,GAAD,OAAWlF,EAASkF,MACjD,cAAZsP,EAA0B,kBAAC,EAAD,CAASxU,SAAU,SAACkF,GAAD,OAAWlF,EAASkF,MACrC,kBAAC,GAAD,CAAOwI,OAAQA,GAAQ1N,SAAU,SAACkF,GAAD,OAAWlF,EAASkF,MAKzF,kBAAC,GAAD,CAAOwI,OAAQA,GAAQ1N,SAAU,SAACkF,GAAD,OAAWlF,EAASkF,UCrKzD2R,QACW,cAA7BjR,OAAOwO,SAAS0C,UAEe,UAA7BlR,OAAOwO,SAAS0C,UAEhBlR,OAAOwO,SAAS0C,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,GAAD,MACAzO,SAAS0O,eAAe,SD2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvW,MAAK,SAAAwW,GACJA,EAAaC,gBAEd7I,OAAM,SAAAhM,GACLC,QAAQD,MAAMA,EAAM8U,c","file":"static/js/main.71dca370.chunk.js","sourcesContent":["import { Card, CardContent, Chip, Divider, Grid, Typography, makeStyles, Tooltip, Button, CardActions, Avatar, LinearProgress } from '@material-ui/core';\r\nimport { Update, Copyright } from '@material-ui/icons';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n    },\r\n}));\r\n\r\nconst Projects = (props) => {\r\n    const setTitle = props.setTitle\r\n    const classes = useStyles()\r\n    const [githubData, setGithubData] = React.useState([])\r\n    const [filters, setFilters] = React.useState([])\r\n    const [tagData, setTagData] = React.useState([])\r\n    const [repositories, setRepositories] = React.useState([])\r\n    React.useEffect(() => {\r\n        setTitle('Projects')\r\n        try {\r\n            fetch('https://api.github.com/users/azharizkita/repos').then((response) =>\r\n                response.json()\r\n            ).then((result) => {\r\n                var tagsData = {}\r\n                var processed = {}\r\n                result.forEach((value) => {\r\n                    if (value.name !== 'azharizkita.github.io') {\r\n                        var tags = undefined\r\n                        if (value.description) {\r\n                            var metaDescription = value.description.split(']')\r\n                            value['description'] = metaDescription[1]\r\n                            tags = metaDescription[0].split('[')\r\n                            if (tags.length > 1) {\r\n                                value['tags'] = tags[1].split(',').map((val) => val.trim())\r\n                                value['tags'].forEach((tag) => {\r\n                                    if (typeof tagsData[tag] !== 'undefined') {\r\n                                        tagsData[tag] += 1\r\n                                    } else {\r\n                                        tagsData[tag] = 1\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                        processed[+new Date(value.pushed_at)] = value\r\n                    }\r\n                })\r\n                var sorted = []\r\n                Object.keys(processed).sort((a, b) => b - a).forEach((value) => sorted.push(processed[value]))\r\n                setGithubData(sorted)\r\n                setTagData(tagsData)\r\n            })\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n    React.useEffect(() => {\r\n        if (githubData) {\r\n            const filteredRepos = githubData.map((repo) => {\r\n                var isFiltered = true\r\n                filters.forEach((filterName) => {\r\n                    if (repo.tags) {\r\n                        if (!repo.tags.includes(filterName)) {\r\n                            isFiltered = false\r\n                        }\r\n                    } else {\r\n                        isFiltered = false\r\n                    }\r\n                })\r\n                if (isFiltered) {\r\n                    return repo\r\n                } else {\r\n                    return null\r\n                }\r\n            }).filter((val) => val !== null)\r\n            setRepositories(filteredRepos)\r\n        }\r\n    }, [filters, githubData])\r\n    return (\r\n        <>\r\n            {githubData.length !== 0 ? (\r\n                <>\r\n                    <div className={classes.root} style={{ padding: 25 }}>\r\n                        {tagData ? (\r\n                            Object.keys(tagData).map((tag, index) => (\r\n                                <Chip\r\n                                    key={index}\r\n                                    avatar={<Avatar>{tagData[tag]}</Avatar>}\r\n                                    label={tag}\r\n                                    onClick={() => {\r\n                                        if (filters.includes(tag)) {\r\n                                            setFilters(filters.filter(e => e !== tag))\r\n                                        } else {\r\n                                            setFilters([...filters, tag])\r\n                                        }\r\n                                    }}\r\n                                    variant={filters.includes(tag) ? 'default' : 'outlined'}\r\n                                />\r\n                            ))\r\n                        ) : ''}\r\n                    </div>\r\n                    <Grid\r\n                        container\r\n                        alignContent={'center'}\r\n                        alignItems={'center'}\r\n                        justify={'center'}\r\n                    >\r\n                        {repositories.length !== 0 ? repositories.map((value, i) => (\r\n                            <Grid key={i} item xs={12} md={4} lg={4} style={{ padding: 15 }}>\r\n                                <Card variant={'outlined'}>\r\n                                    <CardContent style={{ minHeight: 220 }}>\r\n                                        <Typography variant={'h6'} align={'center'} color={'textPrimary'}>\r\n                                            {value.name}\r\n                                        </Typography>\r\n                                        <div style={{ paddingBottom: 10 }} />\r\n                                        <Divider />\r\n                                        <div style={{ paddingBottom: 10 }} />\r\n                                        <Grid\r\n                                            container\r\n                                            className={classes.root}\r\n                                            style={{ width: '100%' }}\r\n                                        >\r\n                                            <Grid item>\r\n                                                <Tooltip title={'Last update'}>\r\n                                                    <Chip\r\n                                                        icon={<Update />}\r\n                                                        label={new Date(value.updated_at).toLocaleDateString() + ', ' + new Date(value.updated_at).toLocaleTimeString()}\r\n                                                        variant={'outlined'}\r\n                                                    />\r\n                                                </Tooltip>\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Tooltip title={'License'}>\r\n                                                    <Chip\r\n                                                        icon={<Copyright />}\r\n                                                        label={value.license ? value.license.name : 'No License'}\r\n                                                        variant={'outlined'}\r\n                                                    />\r\n                                                </Tooltip>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <div style={{ paddingBottom: 10 }} />\r\n                                        <Divider />\r\n                                        <div style={{ paddingBottom: 10 }} />\r\n                                        <Grid\r\n                                            container\r\n                                            className={classes.root}\r\n                                            style={{ width: '100%' }}\r\n                                        >\r\n                                            {value.tags ? value.tags.map((tag, index) => (\r\n                                                <Chip\r\n                                                    key={index}\r\n                                                    label={tag}\r\n                                                    variant={'default'}\r\n                                                />\r\n                                            )) : ''}\r\n                                        </Grid>\r\n                                        {value.tags ? <div style={{ paddingBottom: 5 }} /> : ''}\r\n                                        <Typography align={'center'}>\r\n                                            {value.description ? value.description : 'No desription.'}\r\n                                        </Typography>\r\n                                    </CardContent>\r\n                                    <CardActions>\r\n                                        {value.tags ? (\r\n                                            value.tags.includes('Application') ? <Button color={'primary'} variant={'contained'} onClick={() => window.open('https://azharizkita.github.io/' + value.name + '/', '_blank')} fullWidth>Launch</Button> : ''\r\n                                        ) : ''}\r\n                                        <Button color={'primary'} variant={'contained'} onClick={() => window.open(value.html_url, '_blank')} fullWidth>Explore</Button>\r\n                                    </CardActions>\r\n                                </Card>\r\n                            </Grid>\r\n                        )) : <Grid item style={{ paddingTop: '15%' }}>\r\n                                <Typography variant={'h5'} color={'textSecondary'}>Seems like i haven't created that at once yet :(</Typography>\r\n                            </Grid>}\r\n                    </Grid>\r\n                </>\r\n            ) : (\r\n                    <>\r\n                        <Grid\r\n                            container\r\n                            spacing={0}\r\n                            alignItems={'center'}\r\n                            justify={'center'}\r\n                            style={{ height: '80vh' }}\r\n                        >\r\n                            <Grid item style={{ width: 250 }}>\r\n                                <LinearProgress variant={'buffer'} value={null} valueBuffer={null} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Projects;\r\n","import { Avatar, Grid, Typography, makeStyles, Divider, Chip, useMediaQuery, useTheme } from '@material-ui/core'\r\nimport { GitHub, MailOutline } from '@material-ui/icons/';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport React from 'react'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    large: {\r\n        width: theme.spacing(20),\r\n        height: theme.spacing(20),\r\n    },\r\n    centers: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n    },\r\n}));\r\n\r\nconst Welcome = (props) => {\r\n    const theme = useTheme()\r\n    const setTitle = props.setTitle\r\n    const classes = useStyles()\r\n    const isSmall = useMediaQuery(theme.breakpoints.up('sm'));\r\n    const [bio, setBio] = React.useState({})\r\n    React.useEffect(() => {\r\n        setTitle('About Me')\r\n        try {\r\n            fetch('https://api.github.com/users/azharizkita').then((response) =>\r\n                response.json()\r\n            ).then((value) => {\r\n                setBio(value)\r\n            });\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n    return (\r\n        <>\r\n            <Grid\r\n                container\r\n                style={{ width: '100%', padding: 10, minHeight: isSmall ? '85vh' : '100vh' }}\r\n                justify={'center'}\r\n                alignContent={'center'}\r\n                alignItems={'center'}\r\n            >\r\n                <Grid item xs={12} md={12} style={{ padding: 15 }}>\r\n                    {bio.name ? (\r\n                        <>\r\n                            <Typography variant={'h5'} align={'center'}>Greetings!</Typography>\r\n                            <Typography variant={'h5'} align={'center'} component={'div'}>My name is {bio.name}.</Typography>\r\n                        </>\r\n                    ) : (\r\n                            <>\r\n                                <Typography variant={'h5'} align={'center'}>Greetings!</Typography>\r\n                                <div className={classes.centers}>\r\n                                    <Skeleton width={250} height={24} />\r\n                                </div>\r\n                            </>\r\n                        )\r\n                    }\r\n                </Grid>\r\n                <Grid item xs={12} md={12} style={{ paddingBottom: 15 }}>\r\n                    <div className={classes.centers}>\r\n                        <Avatar alt=\"Remy Sharp\" src={bio.avatar_url} className={classes.large} />\r\n                    </div>\r\n                </Grid>\r\n                <div style={{ paddingBottom: 5 }} />\r\n                <Grid item xs={12} md={12} style={{ paddingBottom: 15 }}>\r\n                    <div className={classes.centers}>\r\n                        <Divider style={{ maxWidth: 550, width: '100%', minWidth: 100 }} />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} style={{ paddingBottom: 15, maxWidth: 500 }}>\r\n                    {bio.name ? (\r\n                        <>\r\n                            <Typography variant={'body1'} align={'center'}>Short summary about my activity? {bio.bio}.</Typography>\r\n                        </>\r\n                    ) : (\r\n                            <>\r\n                                <div className={classes.centers}>\r\n                                    <Skeleton width={500} variant={'text'} />\r\n                                </div>\r\n                            </>\r\n                        )\r\n                    }\r\n                </Grid>\r\n                <Grid item xs={12} md={12} style={{ paddingBottom: 15 }}>\r\n                    <div className={classes.centers}>\r\n                        <Divider style={{ maxWidth: 550, width: '100%', minWidth: 100 }} />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} style={{ paddingBottom: 15 }}>\r\n                    <Typography variant={'h6'} align={'center'}>Reach me out</Typography>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} style={{ paddingBottom: 15 }}>\r\n                    <div className={classes.centers}>\r\n                        {bio.name ? (\r\n                            <>\r\n                                <Chip\r\n                                    icon={<GitHub />}\r\n                                    label={'GitHub.com/azharizkita'}\r\n                                    onClick={() => window.open(bio.html_url, '_blank')}\r\n                                    variant={'outlined'}\r\n                                />\r\n                                <Chip\r\n                                    icon={<MailOutline />}\r\n                                    label={'azharizkita@icloud.com'}\r\n                                    onClick={() => window.open('mailto:azharizkita@icloud.com')}\r\n                                    variant={'outlined'}\r\n                                />\r\n                            </>\r\n                        ) : (\r\n                                <>\r\n                                    <Skeleton width={500} variant={'text'} />\r\n                                </>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Welcome","import { Grid, LinearProgress, Typography } from '@material-ui/core';\r\nimport React, { Component } from 'react';\r\n\r\nexport default class BlogContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            title: '',\r\n            content: ''\r\n        };\r\n\r\n        this.handleNetworkErrors = this.handleNetworkErrors.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getGist();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.gist !== this.props.gist) this.getGist();\r\n    }\r\n\r\n    async getGist() {\r\n        const { gist, file } = this.props,\r\n            id = gist.split('/')[1];\r\n\r\n        if (!id) return this.setState({ loading: false, error: `${gist} is not valid format` });\r\n\r\n        await this.setState({ loading: true });\r\n        this.setupCallback(id);\r\n\r\n        const script = document.createElement('script');\r\n        let url = `https://gist.github.com/${gist}.json?callback=gist_callback_${id}`;\r\n        if (file) url += `&file=${file}`;\r\n        script.type = 'text/javascript';\r\n        script.src = url;\r\n        script.onerror = (e) => this.handleNetworkErrors(e);\r\n        document.head.appendChild(script);\r\n    }\r\n\r\n    handleNetworkErrors(e) {\r\n        this.setState({\r\n            loading: false,\r\n            error: `${this.props.gist} failed to load`\r\n        });\r\n    }\r\n\r\n    setupCallback(id) {\r\n        window[`gist_callback_${id}`] = function (gist) {\r\n            const nextState = { loading: false, error: gist.error || null };\r\n            if (!nextState.error) {\r\n                nextState.title = gist.description;\r\n                nextState.content = `${gist.div.replace(/href=/g, 'target=\"_blank\" href=')}`\r\n            }\r\n            this.setState(nextState);\r\n        }.bind(this);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return <Grid\r\n                container\r\n                style={{ width: '100%', padding: 10, height: '100%' }}\r\n                justify={'center'}\r\n                alignContent={'center'}\r\n                alignItems={'center'}\r\n            >\r\n                <Grid item style={{ width: 250 }}>\r\n                    <LinearProgress variant={'buffer'} value={null} valueBuffer={null} />\r\n                </Grid>\r\n            </Grid>\r\n        } else if (this.state.error) {\r\n            return <Grid\r\n                container\r\n                style={{ width: '100%', padding: 10, height: '100%' }}\r\n                justify={'center'}\r\n                alignContent={'center'}\r\n                alignItems={'center'}\r\n            >\r\n                <Grid item style={{ width: 400 }}>\r\n                    <Typography variant={'h6'} align={'center'} color={'textSecondary'}>This may tak longer than expected...</Typography>\r\n                    <LinearProgress variant={'buffer'} value={null} valueBuffer={null} />\r\n                </Grid>\r\n            </Grid>\r\n        } else {\r\n            const removeElements = (elms) => elms.forEach(el => el.remove());\r\n            var parser = new DOMParser();\r\n            var doc = parser.parseFromString(this.state.content, 'text/html')\r\n            removeElements(doc.querySelectorAll(\".gist-meta\"));\r\n            var finalHTML = doc.body.outerHTML.replace('<body>', '').replace('</body>', '').trim();\r\n            return <section className={'gist__content'} dangerouslySetInnerHTML={{ __html: finalHTML }} />\r\n        }\r\n    }\r\n}","import { Button, Card, CardActions, CardContent, Chip, Dialog, DialogActions, DialogContent, DialogTitle, Divider, Grid, LinearProgress, makeStyles, Tooltip, Typography } from '@material-ui/core';\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport { Schedule } from '@material-ui/icons';\r\nimport BlogContainer from './BlogContainer'\r\nimport React from 'react';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n    },\r\n}));\r\n\r\nconst Blogs = (props) => {\r\n    const setPageDescription = props.setPageDescription\r\n    const setPageTitle = props.setPageTitle\r\n    const uniqueId = props.openId\r\n    const setRefresher = props.setRefresher\r\n    const classes = useStyles()\r\n    const setTitle = props.setTitle\r\n    const [blogs, setBlogs] = React.useState([])\r\n    const [blogId, setBlogId] = React.useState()\r\n    const [openBlog, setOpenBlog] = React.useState(false)\r\n    const ButtonLink = (props) => {\r\n        const { title, description, to } = props;\r\n        return (\r\n            <Button color={'primary'} onClick={() => {\r\n                setRefresher(Date.now())\r\n                setOpenBlog(true)\r\n                setPageTitle(title)\r\n                setPageDescription(description)\r\n            }} component={React.useMemo(\r\n                () => React.forwardRef((itemProps, ref) => <RouterLink to={to} ref={ref} {...itemProps} />),\r\n                [to],\r\n            )} variant={'contained'} fullWidth>Read Blog</Button>\r\n        )\r\n    }\r\n    React.useEffect(() => {\r\n        if (uniqueId) {\r\n            setBlogId(uniqueId)\r\n            setOpenBlog(true)\r\n        } else {\r\n            setBlogId(undefined)\r\n        }\r\n    }, [uniqueId])\r\n    React.useEffect(() => {\r\n        setTitle('Blogs')\r\n        try {\r\n            fetch('https://api.github.com/users/azharizkita/gists').then((response) =>\r\n                response.json()\r\n            ).then((result) => {\r\n                var processed = {}\r\n                result.forEach(blog => {\r\n                    var metadata = blog.description.split('-')\r\n                    var type = metadata[0].trim()\r\n                    if (type === 'Blog') {\r\n                        processed[+new Date(blog.created_at)] = blog\r\n                        processed[+new Date(blog.created_at)]['type'] = type\r\n                        processed[+new Date(blog.created_at)]['title'] = metadata[1].trim()\r\n                        processed[+new Date(blog.created_at)]['description'] = metadata[2].trim()\r\n                    }\r\n                });\r\n                var sorted = []\r\n                Object.keys(processed).sort((a, b) => b - a).forEach((value) => sorted.push(processed[value]))\r\n                var resorted = {}\r\n                sorted.forEach((sortedBlog) => {\r\n                    resorted[sortedBlog.id] = sortedBlog\r\n                })\r\n                setBlogs(resorted)\r\n            })\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n    return (\r\n        <>\r\n            <Dialog\r\n                fullScreen\r\n                open={openBlog}\r\n                onClose={() => {\r\n                    setPageTitle('')\r\n                    setPageDescription('')\r\n                    setOpenBlog(false)\r\n                }}\r\n            >\r\n                <DialogTitle className={classes.root}>{blogs && blogs[blogId] ? blogs[blogId].title : <Skeleton width={250} height={35} />}</DialogTitle>\r\n                <DialogContent>\r\n                    <BlogContainer\r\n                        gist={'azharizkita/' + blogId}\r\n                        file={'index.md'}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant={'contained'} onClick={() => {\r\n                        setPageTitle('')\r\n                        setPageDescription('')\r\n                        setOpenBlog(false)\r\n                    }} color={'primary'}>Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Grid\r\n                container\r\n                style={{ width: '100%', padding: 10, height: '85vh' }}\r\n                justify={'center'}\r\n                alignContent={'center'}\r\n                alignItems={'center'}\r\n            >\r\n                {Object.keys(blogs).length !== 0 ? (\r\n                    Object.values(blogs).map((blog, i) => (\r\n                        <Grid key={i} item xs={12} md={4} lg={4} style={{ padding: 15 }}>\r\n                            <Card variant={'outlined'}>\r\n                                <CardContent style={{ minHeight: 220 }}>\r\n                                    <Typography variant={'h6'} align={'center'} color={'textPrimary'}>\r\n                                        {blog.title}\r\n                                    </Typography>\r\n                                    <div style={{ paddingBottom: 10 }} />\r\n                                    <Divider />\r\n                                    <div style={{ paddingBottom: 10 }} />\r\n                                    <Grid\r\n                                        container\r\n                                        className={classes.root}\r\n                                        style={{ width: '100%' }}\r\n                                    >\r\n                                        <Grid item>\r\n                                            <Tooltip title={'Last update'}>\r\n                                                <Chip\r\n                                                    icon={<Schedule />}\r\n                                                    label={new Date(blog.created_at).toLocaleDateString() + ', ' + new Date(blog.created_at).toLocaleTimeString()}\r\n                                                    variant={'outlined'}\r\n                                                />\r\n                                            </Tooltip>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <div style={{ paddingBottom: 10 }} />\r\n                                    <Divider />\r\n                                    <div style={{ paddingBottom: 10 }} />\r\n                                    <Typography align={'center'}>\r\n                                        {blog.description ? blog.description : 'No desription.'}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                <CardActions>\r\n                                    <ButtonLink title={blog.title} description={blog.description} to={'/?section=blogs&id=' + blog.id} />\r\n                                </CardActions>\r\n                            </Card>\r\n                        </Grid>\r\n                    ))\r\n                ) : <Grid item style={{ width: 250 }}>\r\n                        <LinearProgress variant={'buffer'} value={null} valueBuffer={null} />\r\n                    </Grid>}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Blogs","import { Avatar, Grid, Typography, ListItemText, ListItemAvatar, ListItem, DialogContent, Dialog, DialogActions, Button, IconButton, DialogTitle, FormControl, RadioGroup, FormControlLabel, Radio, Divider, Hidden, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Select, useTheme } from '@material-ui/core'\r\nimport { Error, ErrorOutline, Favorite, FavoriteBorder, HelpOutline, RemoveCircle, RemoveCircleOutline, RotateRight } from '@material-ui/icons';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { Pagination } from '@material-ui/lab';\r\nimport React from 'react';\r\nimport { Bar, Pie, defaults } from 'react-chartjs-2';\r\n\r\nconst Covid = (props) => {\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n    const [isLandscape, setIsLandscape] = React.useState(false)\r\n    const [openError, setOpenError] = React.useState(false)\r\n    const [originalResult, setOriginalResult] = React.useState()\r\n    const [isOverall, setIsOverall] = React.useState(true)\r\n    const [sortedResult, setSortedResult] = React.useState()\r\n    const [lastUpdate, setLastUpdate] = React.useState()\r\n    const [countriesName, setCountriesName] = React.useState()\r\n    const [chartData, setChartData] = React.useState()\r\n    const [global, setGlobal] = React.useState()\r\n    const [openInfo, setOpenInfo] = React.useState(false)\r\n    const [openCountryInfo, setOpenCountryInfo] = React.useState('initial')\r\n    const [parsedCountryInfo, setParsedCountryInfo] = React.useState()\r\n    const [selectedTier, setSelectedTier] = React.useState(1)\r\n    const [accentColor, setAccentColor] = React.useState(props.isDark ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.2)')\r\n    const [fontColor, setFontColor] = React.useState(props.isDark ? 'white' : 'black')\r\n    const setTitle = props.setTitle\r\n    const isDark = props.isDark\r\n    defaults.global.defaultFontColor = fontColor\r\n    React.useEffect(() => {\r\n        if (isDark) {\r\n            setAccentColor('rgba(255, 255, 255, 0.2)')\r\n            setFontColor('white')\r\n        } else {\r\n            setAccentColor('rgba(0, 0, 0, 0.2)')\r\n            setFontColor('black')\r\n        }\r\n    }, [isDark])\r\n    React.useEffect(() => {\r\n        var isPotrait = window.matchMedia(\"(orientation: portrait)\");\r\n        if (isPotrait.matches) {\r\n            setIsLandscape(false)\r\n        } else {\r\n            setIsLandscape(true)\r\n        }\r\n\r\n        isPotrait.addEventListener('change', (orientation) => {\r\n            if (orientation.matches) {\r\n                setIsLandscape(false)\r\n            }\r\n            else {\r\n                setIsLandscape(true)\r\n            }\r\n        });\r\n    }, [])\r\n    React.useEffect(() => {\r\n        setTitle('Covid 19 Monitor')\r\n        fetch('https://api.covid19api.com/summary').then((response) =>\r\n            response.json()\r\n        ).then((value) => {\r\n            if (value && value.Countries && !value.Message.includes('progress')) {\r\n                setOriginalResult(value.Countries)\r\n                setLastUpdate(new Date(value.Date).toLocaleString())\r\n                setGlobal(value.Global)\r\n            } else {\r\n                setOpenError(true)\r\n            }\r\n        }).catch((reason) => console.error(reason));\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n    React.useEffect(() => {\r\n        if (originalResult) {\r\n            var countryNames = {};\r\n            var newSorted = {};\r\n            [...originalResult].sort((a, b) => {\r\n                if (isOverall) {\r\n                    return b.TotalConfirmed - a.TotalConfirmed;\r\n                } else {\r\n                    return b.NewConfirmed - a.NewConfirmed;\r\n                }\r\n            }).forEach((country, index) => {\r\n                countryNames[country.CountryCode] = country.Country\r\n                country['tier'] = Math.ceil((index + 1) / 15)\r\n                country['rank'] = index + 1\r\n                if (!newSorted[Math.ceil((index + 1) / 15)]) {\r\n                    newSorted[Math.ceil((index + 1) / 15)] = [country]\r\n                } else {\r\n                    newSorted[Math.ceil((index + 1) / 15)].push(country)\r\n                }\r\n            });\r\n            setCountriesName(countryNames)\r\n            setSortedResult(newSorted)\r\n        }\r\n    }, [isOverall, originalResult])\r\n    React.useEffect(() => {\r\n        if (sortedResult) {\r\n            var finalSorted = [[], []]\r\n            var confirmed = []\r\n            var recovered = []\r\n            var deaths = []\r\n            Object.values(sortedResult[selectedTier]).forEach((country) => {\r\n                if (isOverall) {\r\n                    confirmed.push(country.TotalConfirmed)\r\n                    recovered.push(country.TotalRecovered)\r\n                    deaths.push(country.TotalDeaths)\r\n                } else {\r\n                    confirmed.push(country.NewConfirmed)\r\n                    recovered.push(country.NewRecovered)\r\n                    deaths.push(country.NewDeaths)\r\n                }\r\n                finalSorted[1].push(country.CountryCode)\r\n            })\r\n            finalSorted[0] = [{\r\n                data: confirmed,\r\n                label: isOverall ? 'Overall Confirmed' : 'New Confirmed',\r\n                backgroundColor: 'rgba(244, 194, 13, 1)'\r\n            }, {\r\n                data: recovered,\r\n                label: isOverall ? 'Overall Recovered' : 'New Recovered',\r\n                backgroundColor: 'rgba(60, 186, 84, 1)'\r\n            }, {\r\n                data: deaths,\r\n                label: isOverall ? 'Overall Deaths' : 'New Deaths',\r\n                backgroundColor: 'rgba(219, 50, 54, 1)'\r\n            }]\r\n        }\r\n        setChartData(finalSorted)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [sortedResult, selectedTier, isOverall])\r\n    return (\r\n        <>\r\n            <Dialog\r\n                fullWidth\r\n                fullScreen={fullScreen}\r\n                maxWidth={'md'}\r\n                open={openCountryInfo !== 'initial'}\r\n                onClose={() => {\r\n                    setOpenCountryInfo('initial')\r\n                }}\r\n            >\r\n                {openCountryInfo !== 'initial' && parsedCountryInfo ? <>\r\n\r\n                    <DialogTitle style={{ textAlign: 'center' }}>\r\n                        {parsedCountryInfo ? parsedCountryInfo.Country : null}\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <Grid\r\n                            container\r\n                            alignContent={'center'}\r\n                            alignItems={'center'}\r\n                            justify={'center'}\r\n                        >\r\n                            <Grid item xs={12} md={6} style={{ minHeight: '50vh' }}>\r\n                                <Pie\r\n                                    data={{\r\n                                        datasets: [{\r\n                                            data: [\r\n                                                openCountryInfo !== 'initial' ? (isOverall ? parsedCountryInfo.TotalConfirmed : parsedCountryInfo.NewConfirmed) : 0,\r\n                                                openCountryInfo !== 'initial' ? (isOverall ? parsedCountryInfo.TotalRecovered : parsedCountryInfo.NewRecovered) : 0,\r\n                                                openCountryInfo !== 'initial' ? (isOverall ? parsedCountryInfo.TotalDeaths : parsedCountryInfo.NewDeaths) : 0,\r\n                                            ],\r\n                                            backgroundColor: [\r\n                                                'rgba(244, 194, 13, 1)',\r\n                                                'rgba(60, 186, 84, 1)',\r\n                                                'rgba(219, 50, 54, 1)',\r\n                                            ],\r\n                                            label: 'Dataset 1'\r\n                                        }],\r\n                                        labels: [\r\n                                            isOverall ? 'Overall Confirmed' : 'New Confirmed',\r\n                                            isOverall ? 'Overall Recovered' : 'New Recovered',\r\n                                            isOverall ? 'Overall Deaths' : 'New Deaths'\r\n                                        ]\r\n                                    }}\r\n                                    options={{\r\n                                        maintainAspectRatio: false,\r\n                                        responsive: true,\r\n                                        tooltips: {\r\n                                            callbacks: {\r\n                                                title: function (tooltipItem, data) {\r\n                                                    return data['labels'][tooltipItem[0]['index']];\r\n                                                },\r\n                                                label: function (tooltipItem, data) {\r\n                                                    return data['datasets'][0]['data'][tooltipItem['index']].toLocaleString();\r\n                                                },\r\n                                            },\r\n                                        },\r\n                                        legend: {\r\n                                            position: 'right',\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} md={12}>\r\n                                <TableContainer>\r\n                                    <Table aria-label=\"simple table\">\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n                                                <TableCell align=\"center\">Tier ({isOverall ? 'Overall Cases' : 'New Cases'})</TableCell>\r\n                                                <TableCell align=\"center\">Rank ({isOverall ? 'Overall Cases' : 'New Cases'})</TableCell>\r\n                                                <TableCell align=\"center\">{isOverall ? 'Overall Confirmed' : 'New Confirmed'}</TableCell>\r\n                                                <TableCell align=\"center\">{isOverall ? 'Overall Recovered' : 'New Recovered'}</TableCell>\r\n                                                <TableCell align=\"center\">{isOverall ? 'Overall Deaths' : 'New Deaths'}</TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell align=\"center\">{parsedCountryInfo ? parsedCountryInfo.tier.toLocaleString() : 0}</TableCell>\r\n                                                <TableCell align=\"center\">{parsedCountryInfo ? parsedCountryInfo.rank.toLocaleString() : 0}</TableCell>\r\n                                                <TableCell align=\"center\">{parsedCountryInfo ? (isOverall ? parsedCountryInfo.TotalConfirmed.toLocaleString() + ' (' + ((parsedCountryInfo.TotalConfirmed / (parsedCountryInfo.TotalConfirmed + parsedCountryInfo.TotalRecovered + parsedCountryInfo.TotalDeaths)) * 100).toFixed(1) + '%)' : parsedCountryInfo.NewConfirmed.toLocaleString() + ' (' + ((parsedCountryInfo.NewConfirmed / (parsedCountryInfo.NewConfirmed + parsedCountryInfo.NewRecovered + parsedCountryInfo.NewDeaths)) * 100).toFixed(1) + '%)') : 0}</TableCell>\r\n                                                <TableCell align=\"center\">{parsedCountryInfo ? (isOverall ? parsedCountryInfo.TotalRecovered.toLocaleString() + ' (' + ((parsedCountryInfo.TotalRecovered / (parsedCountryInfo.TotalConfirmed + parsedCountryInfo.TotalRecovered + parsedCountryInfo.TotalDeaths)) * 100).toFixed(1) + '%)' : parsedCountryInfo.NewRecovered.toLocaleString() + ' (' + ((parsedCountryInfo.NewRecovered / (parsedCountryInfo.NewConfirmed + parsedCountryInfo.NewRecovered + parsedCountryInfo.NewDeaths)) * 100).toFixed(1) + '%)') : 0}</TableCell>\r\n                                                <TableCell align=\"center\">{parsedCountryInfo ? (isOverall ? parsedCountryInfo.TotalDeaths.toLocaleString() + ' (' + ((parsedCountryInfo.TotalDeaths / (parsedCountryInfo.TotalConfirmed + parsedCountryInfo.TotalRecovered + parsedCountryInfo.TotalDeaths)) * 100).toFixed(1) + '%)' : parsedCountryInfo.NewDeaths.toLocaleString() + ' (' + ((parsedCountryInfo.NewDeaths / (parsedCountryInfo.NewConfirmed + parsedCountryInfo.NewRecovered + parsedCountryInfo.NewDeaths)) * 100).toFixed(1) + '%)') : 0}</TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button fullWidth variant={'contained'} color={'primary'} onClick={() => setOpenCountryInfo('initial')}>Close</Button>\r\n                    </DialogActions></> : null}\r\n            </Dialog>\r\n            <Dialog\r\n                open={openInfo}\r\n                onClose={() => {\r\n                    setOpenInfo(false)\r\n                }}\r\n            >\r\n                <DialogTitle style={{ textAlign: 'center' }}>\r\n                    Tier {selectedTier}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Grid\r\n                        container\r\n                        alignContent={'center'}\r\n                        alignItems={'center'}\r\n                        justify={'center'}\r\n                    >\r\n                        <Grid item xs={12} md={12}>\r\n                            <Typography variant={'subtitle1'} color={'textSecondary'} align={'center'}>Consists of countries with ranks between {((selectedTier - 1) * 15) + 1} to {(selectedTier) * 15}.</Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button fullWidth variant={'contained'} color={'primary'} onClick={() => setOpenInfo(false)}>Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Dialog\r\n                open={openError}\r\n                onClose={() => {\r\n                    setOpenError(false)\r\n                }}\r\n            >\r\n                <DialogContent>\r\n                    <Grid\r\n                        container\r\n                        alignContent={'center'}\r\n                        alignItems={'center'}\r\n                        justify={'center'}\r\n                    >\r\n                        <Grid item xs={12} md={12}>\r\n                            <Typography variant={'subtitle1'} color={'textSecondary'} align={'center'}>API Server seems to be bussy processing their new data.</Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button fullWidth onClick={() => setOpenError(false)}>Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Dialog\r\n                open={!isLandscape}\r\n            >\r\n                <DialogContent>\r\n                    <Grid\r\n                        container\r\n                        alignContent={'center'}\r\n                        alignItems={'center'}\r\n                        justify={'center'}\r\n                    >\r\n                        <Grid item>\r\n                            <RotateRight fontSize={'large'} className={'rotateOrientation'} />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={12}>\r\n                            <Typography variant={'subtitle1'} color={'textSecondary'} align={'center'}>Uh, kinda rotate me for better experience?</Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n            </Dialog>\r\n            {isLandscape ? <Grid container>\r\n                <Grid item xs={12} md={2}>\r\n                    <Grid\r\n                        container\r\n                        justify={'center'}\r\n                        alignContent={'center'}\r\n                        alignItems={'center'}\r\n                        style={{ height: 'calc(100vh - 48px)' }}\r\n                    >\r\n                        <Grid item xs={8} md={12}>\r\n                            <Grid container>\r\n                                <Grid item xs={12} md={12}>\r\n                                    <Grid\r\n                                        container\r\n                                        justify={'center'}\r\n                                        alignContent={'center'}\r\n                                        alignItems={'center'}\r\n                                    >\r\n                                        <Grid item>\r\n                                            <FormControl>\r\n                                                <RadioGroup\r\n                                                    name=\"caseDisplay\"\r\n                                                    value={isOverall ? 0 : 1}\r\n                                                    onChange={(event, value) => parseInt(value) === 0 ? setIsOverall(true) : setIsOverall(false)}\r\n                                                >\r\n                                                    <FormControlLabel value={0} control={<Radio />} label=\"Overall Cases\" />\r\n                                                    <FormControlLabel value={1} control={<Radio />} label=\"New Cases\" />\r\n                                                </RadioGroup>\r\n                                            </FormControl>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={12}>\r\n                                    <Grid\r\n                                        container\r\n                                        justify={'center'}\r\n                                        alignContent={'center'}\r\n                                        alignItems={'center'}\r\n                                    >\r\n                                        <Grid item xs={12} md={12}>\r\n                                            <div style={{ padding: 15 }}>\r\n                                                <Select variant={'outlined'} onChange={(event) => {\r\n                                                    setOpenCountryInfo(event.target.value)\r\n                                                    setParsedCountryInfo(JSON.parse(event.target.value))\r\n                                                }} fullWidth native value={openCountryInfo} id=\"grouped-native-select\">\r\n                                                    {sortedResult ? (\r\n                                                        <>\r\n                                                            <option aria-label=\"None\" value={'initial'} disabled>Select a country</option>\r\n                                                            {Object.keys(sortedResult).map((tier, index) => (\r\n                                                                <optgroup key={index} label={'Tier ' + tier}>\r\n                                                                    {Object.values(sortedResult[tier]).map((country, index) => (\r\n                                                                        <option key={index} value={JSON.stringify(country)}>{country.Country + ' (' + country.CountryCode + ')'}</option>\r\n                                                                    ))}\r\n                                                                </optgroup>\r\n                                                            ))}\r\n                                                        </>\r\n                                                    ) : <option aria-label=\"None\" value={'initial'} disabled>Countries</option>}\r\n                                                </Select>\r\n                                            </div>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Hidden mdDown>\r\n                            <Grid item xs={12} md={12} style={{ padding: 25 }}><Divider /></Grid>\r\n                        </Hidden>\r\n                        <Grid item xs={4} md={12}>\r\n                            <Grid container>\r\n                                <Grid item xs={12} md={12}>\r\n                                    <Grid\r\n                                        container\r\n                                        justify={'center'}\r\n                                        alignContent={'center'}\r\n                                        alignItems={'center'}\r\n                                    >\r\n                                        <Grid item>\r\n                                            <ListItem style={{ width: 180 }}>\r\n                                                <ListItemAvatar>\r\n                                                    <Avatar style={{ backgroundColor: 'rgba(244, 194, 13, 1)' }}>\r\n\r\n                                                        {isOverall ? <Error /> : <ErrorOutline />}\r\n                                                    </Avatar>\r\n                                                </ListItemAvatar>\r\n                                                <ListItemText primary=\"Confirmed\" secondary={global ? (isOverall ? (global.TotalConfirmed ? global.TotalConfirmed.toLocaleString() : 0) : (global.NewConfirmed ? global.NewConfirmed.toLocaleString() : 0)) : 0} />\r\n                                            </ListItem>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={12}>\r\n                                    <Grid\r\n                                        container\r\n                                        justify={'center'}\r\n                                        alignContent={'center'}\r\n                                        alignItems={'center'}\r\n                                    >\r\n                                        <Grid item>\r\n                                            <ListItem style={{ width: 180 }}>\r\n                                                <ListItemAvatar>\r\n                                                    <Avatar style={{ backgroundColor: 'rgba(60, 186, 84, 1)' }}>\r\n                                                        {isOverall ? <Favorite /> : <FavoriteBorder />}\r\n                                                    </Avatar>\r\n                                                </ListItemAvatar>\r\n                                                <ListItemText primary=\"Recovered\" secondary={global ? (isOverall ? (global.TotalRecovered ? global.TotalRecovered.toLocaleString() : 0) : (global.NewRecovered ? global.NewRecovered.toLocaleString() : 0)) : 0} />\r\n                                            </ListItem>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={12}>\r\n                                    <Grid\r\n                                        container\r\n                                        justify={'center'}\r\n                                        alignContent={'center'}\r\n                                        alignItems={'center'}\r\n                                    >\r\n                                        <Grid item>\r\n                                            <ListItem style={{ width: 180 }}>\r\n                                                <ListItemAvatar>\r\n                                                    <Avatar style={{ backgroundColor: 'rgba(219, 50, 54, 1)' }}>\r\n                                                        {isOverall ? <RemoveCircle /> : <RemoveCircleOutline />}\r\n                                                    </Avatar>\r\n                                                </ListItemAvatar>\r\n                                                <ListItemText primary=\"Deaths\" secondary={global ? (isOverall ? (global.TotalDeaths ? global.TotalDeaths.toLocaleString() : 0) : (global.NewDeaths ? global.NewDeaths.toLocaleString() : 0)) : 0} />\r\n                                            </ListItem>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} md={10} style={{ padding: 10 }}>\r\n                    <Grid\r\n                        container\r\n                        justify={'center'}\r\n                        alignContent={'center'}\r\n                        alignItems={'center'}\r\n                        style={{ height: 'calc(100vh - 68px)' }}\r\n                    >\r\n                        <Grid item xs={12} md={12}>\r\n                            <Grid\r\n                                container\r\n                                style={{ width: '100%' }}\r\n                                direction={'row'}\r\n                                justify={'center'}\r\n                                alignContent={'center'}\r\n                                alignItems={'center'}\r\n                            >\r\n                                <Typography variant={'h6'} align={'center'}>Tier {selectedTier} Countries</Typography><IconButton onClick={() => setOpenInfo(true)}><HelpOutline /></IconButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={12} style={{ height: '75vh' }}>\r\n                            <Bar\r\n                                data={{\r\n                                    datasets: chartData ? chartData[0] : [],\r\n                                    labels: chartData ? chartData[1] : []\r\n                                }}\r\n                                options={{\r\n                                    maintainAspectRatio: false,\r\n                                    responsive: true,\r\n                                    scales: {\r\n                                        xAxes: [{\r\n                                            gridLines: {\r\n                                                color: accentColor,\r\n                                                zeroLineColor: accentColor\r\n                                            }\r\n                                        }],\r\n                                        yAxes: [{\r\n                                            gridLines: {\r\n                                                color: accentColor,\r\n                                                zeroLineColor: accentColor\r\n                                            },\r\n                                        }]\r\n                                    },\r\n                                    title: {\r\n                                        display: lastUpdate ? true : false,\r\n                                        text: 'Last update at ' + lastUpdate + '. Source: https://api.covid19api.com/',\r\n                                        position: 'bottom'\r\n                                    },\r\n                                    tooltips: {\r\n                                        callbacks: {\r\n                                            label: (tooltipItem, data) => {\r\n                                                return tooltipItem.yLabel.toLocaleString();\r\n                                            },\r\n                                            title: (tooltipItem, data) => {\r\n                                                return countriesName[tooltipItem[0].label];\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={12}>\r\n                            <Grid\r\n                                container\r\n                                justify={'center'}\r\n                                alignContent={'center'}\r\n                                alignItems={'center'}\r\n                                style={{ paddingBottom: 10 }}\r\n                            >\r\n                                <Pagination onChange={(event, page) => setSelectedTier(page)} count={sortedResult ? Object.keys(sortedResult).length : 0} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Covid","import { AppBar, IconButton, Toolbar, Typography, makeStyles, ListItem, ListItemIcon, ListItemText, Tooltip, SwipeableDrawer, Grid, Divider } from '@material-ui/core';\r\nimport { Menu, AccountCircle, Assessment, Brightness7, Brightness4, Book, Grain } from '@material-ui/icons/';\r\nimport { BrowserRouter as Router, Link as RouterLink } from \"react-router-dom\";\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { Helmet } from \"react-helmet\";\r\nimport Projects from './Projects';\r\nimport Welcome from './Welcome';\r\nimport React from 'react';\r\nimport Blogs from './Blogs';\r\nimport Covid from './Covid';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nconst App = () => {\r\n    const classes = useStyles()\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [refresher, setRefresher] = React.useState()\r\n    const [urlParameters, setParameters] = React.useState(new URLSearchParams(window.location.search))\r\n    const section = urlParameters.get('section')\r\n    const id = urlParameters.get('id')\r\n    const [title, setTitle] = React.useState('')\r\n    const [pageTitle, setPageTitle] = React.useState('')\r\n    const [pageDescription, setPageDescription] = React.useState('')\r\n    const [openDrawer, setOpenDrawer] = React.useState(false)\r\n    const [isDark, setIsDark] = React.useState(window.matchMedia('(prefers-color-scheme: dark)').matches)\r\n    const ListItemLink = (props) => {\r\n        const { icon, primary, to } = props;\r\n        return (\r\n            <ListItem selected={title === primary} onClick={() => setOpenDrawer(false)} button component={React.useMemo(\r\n                () => React.forwardRef((itemProps, ref) => <RouterLink to={to} ref={ref} {...itemProps} />),\r\n                [to],\r\n            )}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <ListItemText primary={primary} />\r\n            </ListItem>\r\n        )\r\n    }\r\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {\r\n        if (event.matches) {\r\n            setIsDark(true)\r\n        } else {\r\n            setIsDark(false)\r\n        }\r\n    })\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            primary: {\r\n                main: '#212121',\r\n            },\r\n            secondary: {\r\n                main: '#ff8708',\r\n            },\r\n            type: isDark ? 'dark' : 'light'\r\n        },\r\n    });\r\n    React.useEffect(() => {\r\n        setParameters(new URLSearchParams(window.location.search))\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [window.location.search])\r\n    React.useEffect(() => {\r\n        if (section !== null) {\r\n            if (section === 'blogs') {\r\n                if (id !== null) {\r\n                    try {\r\n                        fetch('https://api.github.com/gists/' + id).then((response) =>\r\n                            response.json()\r\n                        ).then((result) => {\r\n                            if (result && result.description) {\r\n                                const blogMeta = result.description.split('-')\r\n                                if (blogMeta[0].trim() === 'Blog') {\r\n                                    const blogTitle = blogMeta[1].trim()\r\n                                    const blogDescription = blogMeta[2].trim()\r\n                                    setPageTitle(blogTitle[0].toUpperCase() + blogTitle.slice(1))\r\n                                    setPageDescription(blogDescription)\r\n                                } else {\r\n                                    setPageTitle('Blogs')\r\n                                }\r\n                            } else {\r\n                                setPageTitle('Blogs')\r\n                            }\r\n                        })\r\n                    } catch (error) {\r\n                        console.error(error)\r\n                    }\r\n                } else {\r\n                    setPageTitle(section[0].toUpperCase() + section.slice(1))\r\n                }\r\n            } else {\r\n                setPageTitle(section[0].toUpperCase() + section.slice(1))\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [urlParameters])\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>{pageTitle !== '' && pageTitle !== 'Covid19' ? pageTitle : 'Covid 19 Monitor'}</title>\r\n                <meta name=\"description\" content={pageDescription !== '' ? pageDescription : 'Welcome to my Personal Blog!'} />\r\n            </Helmet>\r\n            <ThemeProvider theme={theme}>\r\n                <CssBaseline />\r\n                <Router>\r\n                    <SwipeableDrawer anchor={'left'} open={openDrawer} onClose={() => setOpenDrawer(false)} onOpen={() => setOpenDrawer(true)}>\r\n                        <div style={{ width: 'auto', height: '100vh' }} role={'presentation'}>\r\n                            <Grid\r\n                                container\r\n                                style={{ width: 250, height: '100%' }}\r\n                                justify={'center'}\r\n                                alignContent={'center'}\r\n                                alignItems={'center'}\r\n                            >\r\n                                <Typography align={'center'} color={'textPrimary'} variant={'h6'}>Section</Typography>\r\n                                <Grid item xs={12} md={12} lg={12}>\r\n                                    <div style={{ paddingBottom: 10 }}></div>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={12} lg={12}>\r\n                                    <ListItemLink to={'/?section=covid19'} primary={'Covid 19 Monitor'} icon={<Grain />} />\r\n                                </Grid>\r\n                                <Grid item xs={12} md={12} lg={12}>\r\n                                    <ListItemLink to={'/?section=biography'} primary={'About Me'} icon={<AccountCircle />} />\r\n                                </Grid>\r\n                                <Grid item xs={12} md={12} lg={12}>\r\n                                    <ListItemLink to={'/?section=projects'} primary={'Projects'} icon={<Assessment />} />\r\n                                </Grid>\r\n                                <Grid item xs={12} md={12} lg={12}>\r\n                                    <ListItemLink to={'/?section=blogs'} primary={'Blogs'} icon={<Book />} />\r\n                                </Grid>\r\n                                <Grid item xs={12} md={12} lg={12}>\r\n                                    <div style={{ paddingBottom: 10 }}></div>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={12} lg={12}>\r\n                                    <Divider />\r\n                                </Grid>\r\n                                <Typography align={'center'} color={'textSecondary'} variant={'caption'}>&copy; Copyright {new Date().getFullYear()}, Azhari Rizkita</Typography>\r\n                                <Grid item xs={12} md={12} lg={12}>\r\n                                    <Divider />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </SwipeableDrawer>\r\n                    <AppBar position={'static'} variant={'elevation'}>\r\n                        <Toolbar variant={'dense'}>\r\n                            <IconButton edge={'start'} className={classes.menuButton} onClick={() => setOpenDrawer(true)} color=\"inherit\" aria-label=\"menu\">\r\n                                <Menu />\r\n                            </IconButton>\r\n                            <Typography variant={'h6'} className={classes.title}>\r\n                                {title}\r\n                            </Typography>\r\n                            <Tooltip title={isDark ? 'Switch to light mode' : 'Switch to dark mode'}>\r\n                                <IconButton onClick={() => setIsDark(!isDark)}>\r\n                                    {isDark ? <Brightness4 style={{ color: 'white' }} /> : <Brightness7 style={{ color: 'white' }} />}\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    {section ? (\r\n                        section === 'blogs' ? <Blogs openId={id} setPageTitle={(state) => setPageTitle(state)} setPageDescription={(state) => setPageDescription(state)} setRefresher={(state) => setRefresher(state)} setTitle={(title) => setTitle(title)} /> : (\r\n                            section === 'projects' ? <Projects setTitle={(title) => setTitle(title)} /> : (\r\n                                section === 'biography' ? <Welcome setTitle={(title) => setTitle(title)} /> : (\r\n                                    section === 'covid19' ? <Covid isDark={isDark} setTitle={(title) => setTitle(title)} /> :\r\n                                        <Covid isDark={isDark} setTitle={(title) => setTitle(title)} />\r\n                                )\r\n                            )\r\n                        )\r\n                    ) : <Covid isDark={isDark} setTitle={(title) => setTitle(title)} />}\r\n\r\n                </Router>\r\n            </ThemeProvider>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Application';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}